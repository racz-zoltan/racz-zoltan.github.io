const encryptPasscode=async e=>{const t=new TextEncoder;const n=t.encode(e);const o=await crypto.subtle.digest("SHA-256",n);const s=await crypto.subtle.importKey("raw",o,{name:"AES-GCM"},false,["encrypt","decrypt"]);const c=crypto.getRandomValues(new Uint8Array(12));const a=await crypto.subtle.encrypt({name:"AES-GCM",iv:c},s,o);const r=a.slice(-16);const i=a.slice(0,-16);localStorage.setItem("encryptedPasscode",JSON.stringify({ciphertext:Array.from(new Uint8Array(i)),nonce:Array.from(c),tag:Array.from(new Uint8Array(r))}));localStorage.setItem("lastAccessTime",Date.now().toString())};const decryptPasscode=async e=>{const t=JSON.parse(localStorage.getItem("encryptedPasscode"));if(!t)return false;const{ciphertext:n,nonce:o,tag:s}=t;const c=new TextEncoder;const a=c.encode(e);const r=await crypto.subtle.digest("SHA-256",a);const i=await crypto.subtle.importKey("raw",r,{name:"AES-GCM"},false,["decrypt"]);const l=new Uint8Array(n);const d=new Uint8Array(o);const m=new Uint8Array(s);try{const p=await crypto.subtle.decrypt({name:"AES-GCM",iv:d,additionalData:new Uint8Array,tagLength:128},i,new Uint8Array([...l,...m]));return true}catch(u){return false}};const showPasscodeModal=()=>{const e=document.getElementById("passCodeInput");e.value="";const t=document.getElementById("passCodeModal");t.style.display="block"};const hidePasscodeModal=()=>{const e=document.getElementById("passCodeInput");e.value="";const t=document.getElementById("passCodeModal");t.style.display="none"};const handlePasscodeSubmit=async()=>{const e=document.getElementById("passCodeInput");const t=e.value.trim();if(!localStorage.getItem("encryptedPasscode")){await encryptPasscode(t);hidePasscodeModal()}else{const n=await decryptPasscode(t);if(n){localStorage.setItem("lastAccessTime",Date.now().toString());document.getElementById("passCodeInput").value="";hidePasscodeModal()}else{document.getElementById("passCodeInput").value="";document.getElementById("errorMessage").innerText="Invalid passcode. Please try again."}}};document.getElementById("submitPassCode").addEventListener("click",handlePasscodeSubmit);const checkSessionTimeout=()=>{const e=parseInt(localStorage.getItem("lastAccessTime"))||0;const t=Date.now();if(t-e>5*60*1e3){showPasscodeModal()}};const resetSessionTimer=()=>{localStorage.setItem("lastAccessTime",Date.now().toString());checkSessionTimeout()};setInterval(checkSessionTimeout,60*1e3);if(!localStorage.getItem("encryptedPasscode")){showPasscodeModal()}const resetTimer=()=>{const e=parseInt(localStorage.getItem("lastAccessTime"))||0;const t=Date.now();if(t-e>5*60*1e3){showPasscodeModal()}else{localStorage.setItem("lastAccessTime",t.toString())}};function showModal(e){const t=document.getElementById("alertModal");const n=document.getElementById("alertModalMessage");n.textContent=e;t.style.display="block";const o=document.getElementsByClassName("close")[0];o.onclick=function(){t.style.display="none"};window.onclick=function(e){if(e.target===t){t.style.display="none"}}}function showAccessCodeModal(){return new Promise((t,e)=>{const n=document.getElementById("accessCodeModal");const o=document.getElementById("accessCodeInput");const s=document.getElementById("submitAccessCode");n.style.display="block";s.onclick=function(){const e=o.value;if(e.length>=9){n.style.display="none";t(e)}else{showModal("Please enter a valid access code.")}o.value=""}})}function closeModalAccess(){document.getElementById("accessCodeModal").style.display="none"}document.getElementById("submitAccessCode").addEventListener("click",function(){const e=document.getElementById("accessCodeInput").value;if(e.length>=9){console.log("Access Code: "+e);closeModalAccess()}else{showModal("Please enter a valid access code.")}});function showTOTPCodeModal(){return new Promise((t,e)=>{const n=document.getElementById("totpCodeModal");const o=document.getElementById("totpCodeInput");const s=document.getElementById("submitTOTPCode");n.style.display="block";s.onclick=function(){const e=o.value;if(e.length===6){n.style.display="none";t(e)}else{showModal("Please enter a valid 6-digit TOTP code.")}o.value=""}})}function closeModalTotp(){document.getElementById("totpCodeModal").style.display="none"}document.getElementById("submitTOTPCode").addEventListener("click",function(){const e=document.getElementById("totpCodeInput").value;if(e.length===6){console.log("TOTP Code: "+e);closeModalTotp()}else{showModal("Please enter a valid 6-digit TOTP code.")}});let currentPad="";let existingTeams=[];function switchTab(e){document.querySelectorAll(".tab-content").forEach(e=>e.classList.remove("active"));document.querySelectorAll(".tab-button").forEach(e=>e.classList.remove("active"));document.getElementById(e).classList.add("active");event.target.classList.add("active");if(e==="teamConfig")loadExistingConfigs()}function generatePad(){const t="ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";let n="";for(let e=0;e<1e6;e++){n+=t[Math.floor(Math.random()*t.length)]}currentPad=n;document.getElementById("padOutput").value=n}function downloadPad(){const e=new Blob([currentPad],{type:"text/plain"});const t=document.createElement("a");t.href=URL.createObjectURL(e);t.download="carrypass-pad.txt";t.click()}async function deriveKeysFromPad(e,o,t="default"){const n=new TextEncoder;const s=e.toUpperCase();const c=await crypto.subtle.digest("SHA-512",n.encode(s));const a=Array.from(new Uint8Array(c));function r(e,t){const n=a.slice(0,4).reduce((e,t)=>e<<8|t,0)%(o.length-t);return o.slice(n,n+t)}if(t==="shift5"){const m=5;return{k1:r(m,16),totpSecret:r(m+20,32).replace(/[^A-Z2-7]/g,"A")}}if(t==="pinwheel"){const l=a[10]%o.length;let t="";for(let e=0;e<32;e++){t+=o[(l+e*17)%o.length]}return{k1:r(7,16),totpSecret:t.replace(/[^A-Z2-7]/g,"A")}}if(t==="scatter"){let t=a[3];let n="";for(let e=0;e<32;e++){n+=o[(t+e*a[(e+12)%a.length])%o.length]}return{k1:r(3,16),totpSecret:n.replace(/[^A-Z2-7]/g,"A")}}if(t==="vortex"){let t="";let n=a[6]*19;for(let e=0;e<32;e++){n=(n*31+a[e%a.length])%o.length;t+=o[n]}return{k1:r(1,16),totpSecret:t.replace(/[^A-Z2-7]/g,"A")}}const i=r(0,16);let l=a[4]%(o.length-32);let d="";for(let e=0;e<32;e++){d+=o[l%o.length];l+=a[5+e%(a.length-5)]%11+1}return{k1:i,totpSecret:d.toUpperCase().replace(/[^A-Z2-7]/g,"A")}}async function loadConfigForEdit(){const e=document.getElementById("existingSelect").value;const t=await showAccessCodeModal();const n=await showTOTPCodeModal();if(!t||t.length<9||!n||n.length!==6){return showAlert("Failed to decrypt and load config.","error",alertContainer)}try{const s=await fetch("/configs/carrypass-pad.txt");const c=await s.text();const a=await fetch(`/configs/carrypass-${e.toLowerCase()}.encrypted.json`);const r=await a.json();const i=await crypto.subtle.digest("SHA-512",(new TextEncoder).encode(t.toUpperCase()));const l=Array.from(new Uint8Array(i));const d=l.slice(0,4).reduce((e,t)=>e<<8|t,0)%(c.length-16);const m=c.slice(d,d+16);const u=new TextEncoder;const p=await crypto.subtle.importKey("raw",u.encode(t),"PBKDF2",false,["deriveBits"]);const y=await crypto.subtle.deriveBits({name:"PBKDF2",salt:u.encode(m),iterations:1e5,hash:"SHA-512"},p,256);const g=await crypto.subtle.importKey("raw",y,"AES-GCM",false,["decrypt"]);const h=Uint8Array.from(atob(r.iv),e=>e.charCodeAt(0));const f=Uint8Array.from(atob(r.ciphertext),e=>e.charCodeAt(0));const w=Uint8Array.from(atob(r.tag),e=>e.charCodeAt(0));const E=new Uint8Array(f.length+w.length);E.set(f);E.set(w,f.length);const v=await crypto.subtle.decrypt({name:"AES-GCM",iv:h},g,E);const I=JSON.parse((new TextDecoder).decode(v));const A=I.flavor||"default";const{k1:C,totpSecret:T}=await deriveKeysFromPad(t,c,A);const S=await crypto.subtle.importKey("raw",u.encode(t),"PBKDF2",false,["deriveBits"]);const B=await crypto.subtle.deriveBits({name:"PBKDF2",salt:u.encode(C),iterations:1e5,hash:"SHA-512"},S,256);const M=await crypto.subtle.importKey("raw",B,"AES-GCM",false,["decrypt"]);const b=await crypto.subtle.decrypt({name:"AES-GCM",iv:h},M,E);const x=JSON.parse((new TextDecoder).decode(b));const P=await generateTOTP(T);if(P!==n)return showModal("Invalid TOTP code");const L=Date.now();if(x.expires&&Date.parse(x.expires)+7*864e5<L){return showModal("Config has expired and can no longer be edited.")}if(x.expires&&Date.parse(x.expires)<L){showModal("⚠️ Config expired. You are within the 7-day admin editing grace period.")}resetSessionTimer();document.getElementById("teamName").value=x.team_name;document.getElementById("teamName").disabled=true;document.getElementById("accessCode").value=t;document.getElementById("expiryDate").value=x.expires||"";document.getElementById("flavorSelect").value=x.flavor||"default";const U=document.getElementById("services");U.innerHTML="";x.services.forEach(e=>{const t=document.createElement("div");t.className="field-group";t.innerHTML=`
            <input placeholder="Service Name" value="${e.service_name}">
            <input placeholder="Domain" value="${e.domain}">
            <input placeholder="Username" value="${e.username}">
            <input placeholder="Password" value="${e.password}">
            <button class="btn secondary-outline" style="height: 100%;" onclick="this.parentElement.remove()">Delete</button>
          `;U.appendChild(t)})}catch(o){console.error(o);const alertContainer=document.getElementById("alert-container")||document.body;showAlert("Failed to decrypt and load config.","error",alertContainer)}}async function generateTOTP(e){const t=base32ToBytes(e);const n=Math.floor(Date.now()/3e4);const o=new Uint8Array(8);new DataView(o.buffer).setBigUint64(0,BigInt(n));const s=await crypto.subtle.importKey("raw",t,{name:"HMAC",hash:"SHA-1"},false,["sign"]);const c=await crypto.subtle.sign("HMAC",s,o);const a=new Uint8Array(c);const r=a[a.length-1]&15;const i=(a[r]&127)<<24|a[r+1]<<16|a[r+2]<<8|a[r+3];const l=i%1e6;return l.toString().padStart(6,"0")}function base32ToBytes(e){const t="ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";let n="",o=[];e=e.replace(/=+$/,"").toUpperCase();for(const s of e){const c=t.indexOf(s);n+=c.toString(2).padStart(5,"0")}for(let e=0;e+8<=n.length;e+=8)o.push(parseInt(n.slice(e,e+8),2));return new Uint8Array(o)}function isAscii(e){return/^[\x00-\x7F]*$/.test(e)}function validateAsciiInput(e){const t=/^[\x00-\x7F]*$/;return t.test(e)}function validateInputFields(){const e=document.getElementById("teamName").value.trim();const t=document.getElementById("accessCode").value.trim();if(!validateAsciiInput(e)){showModal("Team name must only contain ASCII characters.");return false}if(!validateAsciiInput(t)){showModal("Access code must only contain ASCII characters.");return false}return true}function normalizeInput(e,t=1024){const n=new TextEncoder;let o=n.encode(e);if(o.length>t){o=o.slice(0,t)}return(new TextDecoder).decode(o)}async function encryptTeamConfig(){const n=document.getElementById("teamName").value.trim();const o=document.getElementById("accessCode").value.trim();const s=document.getElementById("expiryDate").value.trim();const c=document.getElementById("flavorSelect").value;if(!n||!o){return showModal("Both team name and access code are required.")}if(!isAscii(n)){return showModal("Team name can only contain ASCII characters.")}if(!isAscii(o)){return showModal("Access code can only contain ASCII characters.")}if(n===""||o.length<9)return showModal("Access code must be at least 9 characters.");const e=document.querySelectorAll("#services .field-group");const a=[];e.forEach(e=>{const t=e.querySelectorAll("input");if(t[0].value.trim()){a.push({service_name:t[0].value.trim(),domain:t[1].value.trim(),username:t[2].value.trim(),password:t[3].value.trim(),shared:true})}});try{const r=await fetch("/configs/carrypass-pad.txt");const i=await r.text();let e,t;({k1:e,totpSecret:t}=await deriveKeysFromPad(o,i,c));const l=normalizeInput(n,1024);const d=normalizeInput(o,1024);const m={team_name:l,team_seed:l.toLowerCase().replace(/\s+/g,"-"),version:"v1",services:a,totp_secret:t,flavor:c,expires:s||null};const u=`carrypass-${l.toLowerCase()}.encrypted.json`;if(typeof existingTeams==="undefined")window.existingTeams=[];if(!existingTeams.includes(l)){existingTeams.push(l)}const p=new TextEncoder;const y=await crypto.subtle.importKey("raw",p.encode(d),"PBKDF2",false,["deriveBits"]);const g=await crypto.subtle.deriveBits({name:"PBKDF2",salt:p.encode(e),iterations:1e5,hash:"SHA-512"},y,256);const h=await crypto.subtle.importKey("raw",g,"AES-GCM",false,["encrypt"]);const f=crypto.getRandomValues(new Uint8Array(12));const w=p.encode(JSON.stringify(m));const E=await crypto.subtle.encrypt({name:"AES-GCM",iv:f},h,w);const v=new Uint8Array(E);const I={iv:btoa(String.fromCharCode(...f)),ciphertext:btoa(String.fromCharCode(...v.slice(0,v.length-16))),tag:btoa(String.fromCharCode(...v.slice(v.length-16)))};const A=new Blob([JSON.stringify(I,null,2)],{type:"application/json"});const C=document.createElement("a");C.href=URL.createObjectURL(A);C.download=u;C.click();const T=new Blob([JSON.stringify(existingTeams,null,2)],{type:"application/json"});const S=document.createElement("a");S.href=URL.createObjectURL(T);S.download="carrypass-configs.json";S.click();currentTOTP={totp_secret:t};generateQRCode(l,d,s);resetTimer()}catch(t){console.error("Encryption setup failed:",t.message);showModal("Failed to fetch or encrypt with pad: "+t.message)}}async function loadExistingConfigs(){try{const t=await fetch("/configs/carrypass-configs.json");const n=await t.json();existingTeams=n;const o=document.getElementById("existingConfigs");o.innerHTML="";if(n.length>0){const s=document.createElement("div");s.classList.add("container","functions");s.style.marginBottom="2rem";const c=document.createElement("label");c.textContent="Edit Existing Config";const a=document.createElement("div");a.classList.add("custom-dropdown-container");const r=document.createElement("select");r.id="existingSelect";r.classList.add("form-control");n.forEach(e=>{const t=document.createElement("option");t.value=e;t.textContent=e;r.appendChild(t)});const i=document.createElement("div");i.classList.add("custom-dropdown");i.appendChild(r);a.appendChild(i);const l=document.createElement("button");l.textContent="Edit";l.classList.add("btn","outline-gold");l.onclick=()=>loadConfigForEdit();s.appendChild(c);s.appendChild(a);s.appendChild(l);o.appendChild(s)}}catch(e){console.warn("No carrypass-configs.json found")}}function generateQRCode(e,t,n){const o=document.getElementById("qrOutput");const s=document.getElementById("totpCodeQR");const c=document.getElementById("teamNameDisplay");const a=document.getElementById("teamAccessDisplay");const r=document.getElementById("teamExpiryDisplay");o.innerHTML="";if(!isAscii(e)||!isAscii(t)){o.innerHTML="<em>Invalid characters in team name or code. Only ASCII characters are allowed.</em>";return}const i=currentTOTP?.totp_secret;if(!i){o.innerHTML="<em>Missing TOTP secret</em>";return}s.innerHTML=i;c.innerHTML=e;a.innerHTML=t;r.innerHTML=n;const l=32;const d=250;const m=1024;const u=n?`exp. ${n}`:"";let p=`${t} - ${u}`;let y=e;if(y.length>l){o.innerHTML=`<em>Issuer (team name) is too long. It should be no more than ${l} characters.</em>`;return}if(p.length>d){o.innerHTML=`<em>Label (access code) is too long. It should be no more than ${d} characters.</em>`;return}const g=encodeURIComponent(y);const h=`otpauth://totp/${g}:${p}?secret=${i}&issuer=${g}&expiry=${n}`;if(h.length>m){o.innerHTML="<em>QR code URL is too long. Please shorten the team name or access code.</em>";return}const f=document.createElement("div");o.appendChild(f);new QRCode(f,{text:h,width:220,height:220});console.log("✅ QR code generated successfully.")}function addService(){const e=document.createElement("div");e.className="field-group";e.innerHTML=`
            <input placeholder="Service Name">
            <input placeholder="Domain">
            <input placeholder="Username">
            <input placeholder="Password">
            <button class="btn secondary-outline" style="height: 100%; margin-left:10px;" type="button" onclick="this.parentElement.remove()">Delete</button>
        `;document.getElementById("services").appendChild(e);resetTimer()}function clearForm(){document.getElementById("teamName").value="";document.getElementById("teamName").disabled=false;document.getElementById("accessCode").value="";document.getElementById("expiryDate").value="";document.getElementById("services").innerHTML="";document.getElementById("qrOutput").innerHTML="";resetTimer()}function showAlert(e,t="info",n=document.body){const o=document.createElement("div");o.className=`custom-alert custom-alert-${t}`;o.innerHTML=`
        <span>${e}</span>
        <button class="custom-alert-close" onclick="this.parentElement.remove()">×</button>
      `;n.prepend(o);setTimeout(()=>{o.remove()},4e3)}function switchOff(){const e=Date.now();let t=e-10*60*1e3;localStorage.setItem("lastAccessTime",t.toString());const n=document.getElementById("passCodeInput");n.value="";showPasscodeModal()}window.addEventListener("load",checkSessionTimeout);window.addEventListener("popstate",checkSessionTimeout);window.addEventListener("hashchange",checkSessionTimeout);