window._editingCredential=null;const MAX_CALLS_PER_MINUTE=5;const RATE_LIMIT_WINDOW=60*1e3;let callTimes=[];function isRateLimited(){const currentTime=Date.now();callTimes=callTimes.filter(time=>currentTime-time<RATE_LIMIT_WINDOW);return callTimes.length>=MAX_CALLS_PER_MINUTE}function updateCounter(){callTimes.push(Date.now())}const MAX_ATTEMPTS_PER_MIN=5;const RATE_LIMIT_WINDOW_MS=60*1e3;let unlockAttempts=[];function isViewerRateLimited(){const now=Date.now();unlockAttempts=unlockAttempts.filter(ts=>now-ts<RATE_LIMIT_WINDOW_MS);return unlockAttempts.length>=MAX_ATTEMPTS_PER_MIN}function recordViewerAttempt(){unlockAttempts.push(Date.now())}async function confirmModal(key){return new Promise(resolve=>{const message=t(key);showConfirmation(message,result=>resolve(result))})}const translations={};async function loadLanguage(lang){if(translations[lang])return;try{const response=await fetch(`./lang/${lang}.json`);if(!response.ok)throw new Error(`Failed to load ${lang}.json`);translations[lang]=await response.json()}catch(error){console.error(`Error loading language file: ${error}`)}}let vault={};function enforceDigitInput(inputId){const inputElement=document.getElementById(inputId);if(!inputElement)return;inputElement.addEventListener("input",function(){this.value=this.value.replace(/[^0-9]/g,"")})}enforceDigitInput("iterationCount");function generateRandomUsername(webAddress,iterationCount,salt,length){const charset=PASSWORDCHARSETS.lowerAlpha;const input=webAddress+"::"+":pwd:"+"::"+salt;const keySize=Math.ceil(length/4);const hash=CryptoJS.PBKDF2(input,salt,{keySize:keySize,iterations:Math.max(500,parseInt(iterationCount)||500),hasher:CryptoJS.algo.SHA256});let username="";const words=hash.words;for(let i=0;i<length;i++){const byte=words[Math.floor(i/4)]>>24-i%4*8&255;username+=charset[byte%charset.length]}return username}async function generateUsername(){let webAddress=document.getElementById("webAddress").value;let iterationCount=document.getElementById("iterationCount").value;const salt=generateWithMaster(webAddress);let length=14;let key=generateRandomUsername(webAddress,iterationCount,salt,length);document.getElementById("username").value=key}async function copyToClipboard(text){try{await navigator.clipboard.writeText(text)}catch(err){showModal("Failed to copy text to clipboard.")}}function showAlert(message,type="info",container=document.body){const alert=document.createElement("div");alert.className=`custom-alert custom-alert-${type}`;alert.innerHTML=`
    <span>${message}</span>
    <button class="custom-alert-close" onclick="this.parentElement.remove()">×</button>
  `;container.prepend(alert);setTimeout(()=>{alert.remove()},4e3)}function generateWithMaster(webAddress){var input=webAddress+":pwd:";var base32Chars="ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";while(input.length<32){input+=input}input=input.slice(0,32);var base64=btoa(input);var result="";for(var i=0;i<base64.length;i++){var char=base64.charAt(i);if(char!=="="){var index=char.charCodeAt(0);if(index===43)index=62;else if(index===47)index=63;result+=base32Chars[index>>2];result+=base32Chars[(index&3)<<3|base64.charCodeAt(++i)>>5];result+=base32Chars[base64.charCodeAt(i)&31]}}result=result.slice(0,32);document.getElementById("salt").value=result;document.getElementById("keyGeneratorForm").addEventListener("submit",function(event){event.preventDefault()});return result}function t(key,params={}){const lang=localStorage.getItem("preferredLanguage")||"en";let str=translations[lang]?.[key]||key;for(const[k,v]of Object.entries(params)){str=str.replaceAll(`\${${k}}`,v)}return str}const autoHideTimers={};function showManyPassword(button){const inputId=button.name;const passwordInput=document.getElementById(inputId);if(!passwordInput){showAlert(`No field found for: ${inputId}`,"error");return}const textSpan=button.querySelector(".toggle-text");if(textSpan){textSpan.setAttribute("data-i18n",passwordInput.type==="password"?"hideButton":"showButton");const lang=localStorage.getItem("preferredLanguage")||"en";const key=textSpan.getAttribute("data-i18n");textSpan.innerText=translations[lang]?.[key]||key}if(autoHideTimers[inputId]){clearTimeout(autoHideTimers[inputId]);delete autoHideTimers[inputId]}const isHidden=passwordInput.type==="password";passwordInput.type=isHidden?"text":"password";button.textContent=isHidden?t("hide"):t("show");if(isHidden){autoHideTimers[inputId]=setTimeout(()=>{passwordInput.type="password";button.textContent=t("show");delete autoHideTimers[inputId]},1e4)}}let masterPasswordHideTimeout=null;function showMasterPassword(button){const inputId=button.name;const passwordInput=document.getElementById(inputId);if(!passwordInput){showAlert(`No field found for: ${inputId}`,"error");return}const textSpan=button.querySelector(".toggle-text");const isCurrentlyHidden=passwordInput.type==="password";if(isCurrentlyHidden){passwordInput.type="text";if(textSpan){textSpan.setAttribute("data-i18n","showButton");textSpan.textContent=t("hide")}lucide.createIcons();clearTimeout(masterPasswordHideTimeout);masterPasswordHideTimeout=setTimeout(()=>{passwordInput.type="password";if(textSpan){textSpan.setAttribute("data-i18n","showButton");textSpan.textContent=t("show")}lucide.createIcons()},4e3)}else{clearTimeout(masterPasswordHideTimeout);passwordInput.type="password";if(textSpan){textSpan.setAttribute("data-i18n","showButton");textSpan.textContent=t("show")}lucide.createIcons()}}function clearAllPassword(){resetTimer();document.getElementById("mainPassword").value="";document.getElementById("supplementaryone").value="";document.getElementById("supplementarytwo").value="";document.getElementById("supplementarythree").value="";document.getElementById("supplementaryfour").value="";document.getElementById("supplementaryfive").value="";document.getElementById("username").value="";document.getElementById("createdfor").innerHTML="";let additional=document.getElementById("additionalPasswords");let generated=document.getElementById("generatedPassword");hideSmooth(additional);hideSmooth(generated);generatePasswordAndTrigger("")}if("serviceWorker"in navigator){window.addEventListener("load",function(){navigator.serviceWorker.register("/service-worker.js").then(function(registration){console.log("ServiceWorker registration successful with scope: ",registration.scope)},function(err){console.error("ServiceWorker registration failed: ",err)})})}function segmentKey(key,segmentSize=7){let output="",i=0;while(i+segmentSize<key.length){output+=key.slice(i,i+segmentSize)+"-";i+=segmentSize}return output+key.slice(i)}const fileButton=document.getElementById("fileButton");const fileInput=document.getElementById("fileInput");if(fileButton&&fileInput){fileButton.addEventListener("click",function(){fileInput.click()})}const fileButtonDecrypt=document.getElementById("fileButtonDecrypt");const encryptedFileInput=document.getElementById("encryptedFileInput");if(fileButtonDecrypt&&encryptedFileInput){fileButtonDecrypt.addEventListener("click",function(){encryptedFileInput.click()})}document.addEventListener("DOMContentLoaded",function(){const navLinks=document.querySelectorAll(".nav-link");navLinks.forEach(function(navLink){navLink.addEventListener("click",function(){const navbarCollapse=document.querySelector(".navbar-collapse");if(navbarCollapse.classList.contains("show")){navbarCollapse.classList.remove("show")}})})});function showModal(message){const modal=document.getElementById("alertModalAlert");const modalMessage=document.getElementById("alertModalMessage");modalMessage.textContent=message;modal.style.display="block";const closeButton=document.getElementsByClassName("close")[0];closeButton.onclick=function(){modal.style.display="none"};window.onclick=function(event){if(event.target===modal){modal.style.display="none"}}}function calculateEntropy(password){if(!password)return 0;const charsetSize=getCharsetSize(password);return password.length*Math.log2(charsetSize)}function getCharsetSize(password){const uniqueChars=new Set(password.split(""));return uniqueChars.size}function updatePasswordStrength(password){const strengthBar=document.getElementById("passwordStrengthBar");const strengthText=document.getElementById("passwordStrengthText");const entropyText=document.getElementById("entropyText");let score=0;let hasLower=/[a-z]/.test(password);let hasUpper=/[A-Z]/.test(password);let hasDigit=/\d/.test(password);let hasSpecial=/[!@#$%^&*(),.?":{}|<>]/.test(password);if(!password){strengthText.innerText="";strengthBar.className="";entropyText.innerText="";strengthText.style.color="blue";return}if(password.length>=12){score++}if(password.length>=17){score++}if(hasLower)score++;if(hasUpper)score++;if(hasDigit)score++;if(hasSpecial)score++;const entropy=calculateEntropy(password);let entropyScore=0;let entropyLevel="Low Entropy";if(entropy<30){entropyScore=1;entropyLevel="Low Entropy"}else if(entropy>=30&&entropy<56){entropyScore=2;entropyLevel="Medium Entropy"}else if(entropy>=56&&entropy<85){entropyScore=4;entropyLevel="High Entropy"}else{entropyScore=6;entropyLevel="Extra Strong"}score+=entropyScore;entropyText.innerText=`Entropy: ${entropy.toFixed(2)} (${entropyLevel})`;let strengthLevel="Weak";let strengthColor="red";if(score<=5){strengthLevel="Weak";strengthColor="red"}else if(score<=8){strengthLevel="Medium";strengthColor="orange"}else if(score<=10){strengthLevel="Strong";strengthColor="green"}else{strengthLevel="Extra Strong";strengthColor="#1E003B"}strengthBar.className="";strengthBar.classList.add(strengthLevel.toLowerCase().replace(" ",""));strengthText.innerText=strengthLevel;strengthText.style.color=strengthColor}function generatePasswordAndTrigger(password){document.getElementById("mainPassword").value=password;updatePasswordStrength(password)}function copyPasswordCheck(button){resetTimer();const passwordField=document.getElementById(button.name);const successIcon=document.getElementById("copySuccessIcon-"+button.getAttribute("data-password-id"));navigator.clipboard.writeText(passwordField.value).then(()=>{successIcon.style.display="inline";successIcon.innerHTML='<i data-lucide="copy-check" style="color: green; font-size: 18px;"></i>';lucide.createIcons();document.getElementById("clearClipboardBtn").style.display="flex";setTimeout(()=>{document.getElementById("clearClipboardBtn").style.display="none"},6e5);setTimeout(()=>{successIcon.style.display="none"},2e3)})["catch"](err=>{console.error("Error copying text: ",err)})}document.getElementById("clearClipboardBtn").addEventListener("click",()=>{navigator.clipboard.writeText("").then(()=>{document.getElementById("clearClipboardBtn").style.display="none"})["catch"](err=>{console.warn("Clipboard clear failed:",err);document.getElementById("clearClipboardBtn").style.display="none";showAlert("Unable to clear clipboard. Please copy something else manually to clear sensitive data.")})});function copyPasswordCheckAfterGeneration(){const successIcon=document.getElementById("copySuccessIcon-mainCopy");successIcon.style.display="inline";successIcon.innerHTML='<i data-lucide="copy-check" style="color: green; font-size: 18px;"></i>';lucide.createIcons();setTimeout(()=>{successIcon.style.display="none"},2e3)}const encryptPasscode=async passcode=>{const encoder=new TextEncoder;const data=encoder.encode(passcode);const passwordHash=await crypto.subtle.digest("SHA-256",data);const key=await crypto.subtle.importKey("raw",passwordHash,{name:"AES-GCM"},false,["encrypt","decrypt"]);const nonce=crypto.getRandomValues(new Uint8Array(12));const cipherText=await crypto.subtle.encrypt({name:"AES-GCM",iv:nonce},key,passwordHash);const tag=cipherText.slice(-16);const ciphertextWithoutTag=cipherText.slice(0,-16);localStorage.setItem("encryptedPasscode",JSON.stringify({ciphertext:Array.from(new Uint8Array(ciphertextWithoutTag)),nonce:Array.from(nonce),tag:Array.from(new Uint8Array(tag))}));localStorage.setItem("lastAccessTime",Date.now().toString())};const decryptPasscode=async enteredPasscode=>{const storedData=JSON.parse(localStorage.getItem("encryptedPasscode"));if(!storedData)return false;const{ciphertext,nonce,tag}=storedData;const encoder=new TextEncoder;const data=encoder.encode(enteredPasscode);const passwordHash=await crypto.subtle.digest("SHA-256",data);const key=await crypto.subtle.importKey("raw",passwordHash,{name:"AES-GCM"},false,["decrypt"]);const ciphertextUint8=new Uint8Array(ciphertext);const nonceUint8=new Uint8Array(nonce);const tagUint8=new Uint8Array(tag);try{const decryptedData=await crypto.subtle.decrypt({name:"AES-GCM",iv:nonceUint8,additionalData:new Uint8Array,tagLength:128},key,new Uint8Array([...ciphertextUint8,...tagUint8]));return true}catch(e){return false}};const handlePasscodeSubmit=async mode=>{if(mode==="register"){const passcodeRegister=document.getElementById("passCodeInputRegister")?.value.trim();const passcodeRegisterInput=document.getElementById("passCodeInputRegister");if(!passcodeRegister||passcodeRegister.length<6){showModalAlert("applicationIDSix");return}await encryptPasscode(passcodeRegister);await deriveSessionKey(passcodeRegister);await decryptStoredTOTPSecret(passcodeRegister);await decryptStoredLabel(passcodeRegister);passcodeRegisterInput.value="";updateTrustedDeviceIndicator();showScreen("appView");return}const passcode=document.getElementById("passCodeInput")?.value.trim();const passcodeInput=document.getElementById("passCodeInput");if(!passcode||passcode.length<6){showModalAlert("applicationIDSix");return}const isValid=await decryptPasscode(passcode);if(isValid){localStorage.setItem("lastAccessTime",Date.now().toString());passcodeInput.value="";await deriveSessionKey(passcode);await decryptStoredTOTPSecret(passcode);await decryptStoredLabel(passcode);updateTrustedDeviceIndicator();buildSavedServicesList();showScreen("appView")}else{showModalAlert("invalidID")}};document.getElementById("submitPassCode").addEventListener("click",()=>handlePasscodeSubmit("login"));document.getElementById("submitPassCodeRegister").addEventListener("click",()=>handlePasscodeSubmit("register"));let sessionKey=null;async function deriveSessionKey(passcode){const encoder=new TextEncoder;const hash=await crypto.subtle.digest("SHA-256",encoder.encode(passcode));const key=await crypto.subtle.importKey("raw",hash,{name:"AES-GCM"},false,["encrypt","decrypt"]);sessionKey=key}async function decryptStoredTOTPSecret(passcode){const encryptedQR=localStorage.getItem("encryptedQR");if(!encryptedQR){window.sessionTOTPSecret=null;return}try{const{ciphertext,nonce,tag}=JSON.parse(encryptedQR);const encoder=new TextEncoder;const passwordHash=await crypto.subtle.digest("SHA-256",encoder.encode(passcode));const key=await crypto.subtle.importKey("raw",passwordHash,{name:"AES-GCM"},false,["decrypt"]);const decrypted=await crypto.subtle.decrypt({name:"AES-GCM",iv:new Uint8Array(nonce),tagLength:128},key,new Uint8Array([...ciphertext,...tag]));window.sessionTOTPSecret=(new TextDecoder).decode(decrypted)}catch(err){window.sessionTOTPSecret=null;console.warn("⚠️ Failed to decrypt TOTP secret:",err)}}async function decryptStoredLabel(passcode){const encryptedLabel=localStorage.getItem("encryptedLabel");if(!encryptedLabel){window.sessionMemberId=null;return}try{const{ciphertext,nonce,tag}=JSON.parse(encryptedLabel);const encoder=new TextEncoder;const passwordHash=await crypto.subtle.digest("SHA-256",encoder.encode(passcode));const key=await crypto.subtle.importKey("raw",passwordHash,{name:"AES-GCM"},false,["decrypt"]);const decrypted=await crypto.subtle.decrypt({name:"AES-GCM",iv:new Uint8Array(nonce),tagLength:128},key,new Uint8Array([...ciphertext,...tag]));window.sessionMemberId=(new TextDecoder).decode(decrypted)}catch(e){window.sessionMemberId=null;console.warn("⚠️ Failed to decrypt label:",e)}}function setCharTypesValues(){document.getElementById("length").value="28";document.getElementById("iterationCount").value="100";document.getElementById("toggle1").checked=true;document.getElementById("toggle2").checked=true;document.getElementById("toggle3").checked=true;document.getElementById("toggle4").checked=false;document.getElementById("toggle5").checked=true}const saveSettings=async()=>{const rawAddress=document.getElementById("webAddress").value.trim();const normalized=normalizeServiceName(rawAddress);if(!normalized)return;const settings={webAddress:rawAddress,length:document.getElementById("length").value,iterationCount:document.getElementById("iterationCount").value,uppercase:document.getElementById("toggle1").checked,lowercase:document.getElementById("toggle2").checked,numbers:document.getElementById("toggle3").checked,symbols:document.getElementById("toggle4").checked,separator:document.getElementById("toggle5").checked};await encryptSettings(normalized,settings);buildSavedServicesList()};const encryptSettings=async(serviceName,settings)=>{if(!sessionKey){console.error("No session key.");return}const encoder=new TextEncoder;const data=encoder.encode(JSON.stringify(settings));const nonce=crypto.getRandomValues(new Uint8Array(12));const encrypted=await crypto.subtle.encrypt({name:"AES-GCM",iv:nonce},sessionKey,data);const tag=encrypted.slice(-16);const ciphertextWithoutTag=encrypted.slice(0,-16);localStorage.setItem(`encryptedSettings_${serviceName}`,JSON.stringify({ciphertext:Array.from(new Uint8Array(ciphertextWithoutTag)),nonce:Array.from(nonce),tag:Array.from(new Uint8Array(tag))}))};const decryptSettingsFromMemory=async serviceName=>{if(!sessionKey){console.error("No session key available. Cannot decrypt settings.");return null}const storedRaw=localStorage.getItem(`encryptedSettings_${serviceName}`);if(!storedRaw){return null}const stored=JSON.parse(storedRaw);const ciphertext=new Uint8Array(stored.ciphertext.concat(stored.tag));const nonce=new Uint8Array(stored.nonce);try{const decrypted=await crypto.subtle.decrypt({name:"AES-GCM",iv:nonce},sessionKey,ciphertext);const decoded=(new TextDecoder).decode(decrypted);return JSON.parse(decoded)}catch(e){return null}};let lastLoadedService="";document.getElementById("webAddress").addEventListener("input",()=>{const currentInput=normalizeServiceName(document.getElementById("webAddress").value.trim());if(lastLoadedService&&currentInput!==lastLoadedService){document.getElementById("length").value="28";document.getElementById("iterationCount").value="100";document.getElementById("toggle1").checked=true;document.getElementById("toggle2").checked=true;document.getElementById("toggle3").checked=true;document.getElementById("toggle4").checked=false;document.getElementById("toggle5").checked=true;updateArgonTierLabel()}});document.addEventListener("DOMContentLoaded",()=>{document.getElementById("toggle1Admin").checked=true;document.getElementById("toggle2Admin").checked=true;document.getElementById("toggle3Admin").checked=true;document.getElementById("toggle4Admin").checked=true;document.getElementById("toggle5Admin").checked=false;document.getElementById("saltAdmin").value="";document.getElementById("lengthAdmin").value=43;document.getElementById("iterationCountAdmin").value=5e4});document.getElementById("webAddress").addEventListener("blur",async()=>{const webAddressInput=document.getElementById("webAddress").value.trim();const normalized=normalizeServiceName(webAddressInput);if(!normalized)return;const settings=await decryptSettingsFromMemory(normalized);if(!settings){document.getElementById("length").value="28";document.getElementById("iterationCount").value="100";document.getElementById("toggle1").checked=true;document.getElementById("toggle2").checked=true;document.getElementById("toggle3").checked=true;document.getElementById("toggle4").checked=false;document.getElementById("toggle5").checked=true;const dot=document.getElementById("dot");dot.style.backgroundColor="red";updateArgonTierLabel();lastLoadedService="";return}document.getElementById("webAddress").value=settings.webAddress;document.getElementById("length").value=settings.length;document.getElementById("iterationCount").value=settings.iterationCount;document.getElementById("toggle1").checked=settings.uppercase;document.getElementById("toggle2").checked=settings.lowercase;document.getElementById("toggle3").checked=settings.numbers;document.getElementById("toggle4").checked=settings.symbols;document.getElementById("toggle5").checked=settings.separator;updateArgonTierLabel();const dot=document.getElementById("dot");dot.style.backgroundColor="green";lastLoadedService=normalized});function handleSessionTimeout(){switchOff(true);const storedPasscode=localStorage.getItem("encryptedPasscode");if(storedPasscode){showScreen("loginView")}else{showScreen("registrationView")}}const checkSessionTimeout=()=>{const lastAccessTime=parseInt(localStorage.getItem("lastAccessTime"))||0;const currentTime=Date.now();if(currentTime-lastAccessTime>15*60*1e3){const storedPasscode=localStorage.getItem("encryptedPasscode");sessionKey="";vault={};if(storedPasscode){showScreen("loginView")}else{showScreen("registrationView")}}};const resetSessionTimer=()=>{localStorage.setItem("lastAccessTime",Date.now().toString());checkSessionTimeout();updateCountdownDisplay()};setInterval(checkSessionTimeout,30*1e3);if(!localStorage.getItem("encryptedPasscode")){showScreen("registrationView")}document.addEventListener("click",e=>{const link=e.target.closest("[data-section]");if(!link)return;e.preventDefault();const screenId=link.getAttribute("data-section");showScreen(screenId)});function clearSensitiveInputs(){const fieldIds=["memberId","memberPassword","memberTOTPInput","adminAccessInput","adminPasswordInput","adminTOTPInput","adminPasswordEditorInput","adminEditorTOTPInput","passCodeInput","passCodeInputRegister"];fieldIds.forEach(id=>{const el=document.getElementById(id);if(el)el.value=""});const fileInputs=document.querySelectorAll('input[type="file"]');fileInputs.forEach(input=>{input.value=""})}function showScreen(screenId){document.querySelectorAll(".screen").forEach(screen=>{if(screen.id===screenId){screen.style.display="block";screen.classList.remove("active");void screen.offsetWidth;setTimeout(()=>{screen.classList.add("active")},10)}else{screen.classList.remove("active");setTimeout(()=>{screen.style.display="none"},400)}});if((screenId==="loginView"||screenId==="registrationView")&&document.querySelector('.modal.active, .modal.visible, .modal.show, .modal[open], .modal[style*="block"]')){closeAllModals()}if(screenId==="loginView"||screenId==="registrationView"){if(typeof vault==="object"&&vault!==null){for(const key in vault){if(Object.hasOwn(vault,key)){delete vault[key]}}}}}const resetTimer=()=>{const lastAccessTime=parseInt(localStorage.getItem("lastAccessTime"))||0;const currentTime=Date.now();if(currentTime-lastAccessTime>15*60*1e3){const storedPasscode=localStorage.getItem("encryptedPasscode");sessionKey="";if(storedPasscode){showScreen("loginView")}else{showScreen("registrationView")}}else{localStorage.setItem("lastAccessTime",currentTime.toString());updateCountdownDisplay()}};function closeAllModals(){if(window.openModals){window.openModals.forEach(closeFn=>{try{if(typeof closeFn==="function")closeFn()}catch(e){console.warn("Error closing tracked modal:",e)}});window.openModals=[]}document.querySelectorAll(".modal").forEach(modal=>{modal.classList.remove("active","visible","show");if(!modal.classList.contains("hidden")){modal.classList.add("hidden")}modal.style.display="none";if(typeof modal.close==="function"&&modal.hasAttribute("open")){try{modal.close()}catch(e){}}});document.querySelectorAll(".modal-backdrop").forEach(b=>b.remove())}function switchOff(skipShowScreen=false){const currentTime=Date.now();const twentyMinutesAgo=currentTime-20*60*1e3;localStorage.setItem("lastAccessTime",twentyMinutesAgo.toString());document.querySelectorAll("input, textarea").forEach(el=>{if(el.type!=="checkbox"&&el.type!=="radio"){el.value=""}else{el.checked=false}});["mainPassword","username","supplementaryone","supplementarytwo","supplementarythree","supplementaryfour","supplementaryfive"].forEach(id=>{const el=document.getElementById(id);if(el)el.value=""});sessionKey="";window.sessionTOTPSecret=null;window.sessionMemberId=null;document.querySelectorAll(".modal, .modal-edit, .modal-confirm, .carrypass-modal").forEach(modal=>{modal.classList.add("hidden");modal.classList.remove("active");modal.style.display="none"});const backdrop=document.getElementById("modalBackdrop");if(backdrop)backdrop.classList.add("hidden");document.querySelectorAll(".modal-error").forEach(errBox=>{errBox.textContent="";errBox.classList.add("hidden");errBox.classList.remove("active")});vault={};adminConfig=null;securelyEraseMemory();const fieldsToClear=["adminAccessInput","adminPasswordInput","adminTOTPInput","adminPasswordEditorInput","adminEditorTOTPInput"];fieldsToClear.forEach(id=>{const el=document.getElementById(id);if(el)el.value=""});const elementsToClear=["teamsList","membersList","credentialsList","assignmentsList","vaultExportFeedback","vaultExpirationDisplay"];elementsToClear.forEach(id=>{const el=document.getElementById(id);if(el)el.innerHTML=""});const searchInputs=["teamSearchInput","memberSearchInput","credentialSearchInput","credentialSearchByTeam","assignmentSearchInput","assignmentSearchByTeam"];searchInputs.forEach(id=>{const el=document.getElementById(id);if(el)el.value=""});const qrOutput=document.getElementById("qrOutput");if(qrOutput)qrOutput.innerHTML="";const expirySortBtn=document.getElementById("toggleExpirySort");if(expirySortBtn)expirySortBtn.setAttribute("data-active","false");if(!skipShowScreen){const storedPasscode=localStorage.getItem("encryptedPasscode");showScreen(storedPasscode?"loginView":"registrationView")}}function deleteQrCode(){const qrOutput=document.getElementById("qrOutput");const qrPlace=document.getElementById("hiddenQr");if(qrOutput)qrOutput.innerHTML="";if(qrOutput)qrPlace.style.display="none"}document.addEventListener("DOMContentLoaded",()=>{const resetButton=document.getElementById("resetAppButton");if(resetButton){resetButton.addEventListener("click",async()=>{setTimeout(async()=>{const message=t("resetApplicationConfirm");const confirmed=await confirmModal(message);if(confirmed){resetCompleteApp()}},100)})}});function showConfirmModal(message,onConfirm){const modal=document.getElementById("confirmationModal");const msg=document.getElementById("confirmationMessage");const yesBtn=document.getElementById("confirmYesBtn");const noBtn=document.getElementById("confirmNoBtn");msg.textContent=message;modal.classList.remove("hidden");const close=()=>{modal.classList.add("hidden");yesBtn.removeEventListener("click",confirmHandler);noBtn.removeEventListener("click",cancelHandler)};const confirmHandler=()=>{close();if(typeof onConfirm==="function")onConfirm()};const cancelHandler=()=>close();yesBtn.addEventListener("click",confirmHandler);noBtn.addEventListener("click",cancelHandler)}function resetCompleteApp(){localStorage.clear();if(typeof sessionKey!=="undefined")sessionKey="";document.querySelectorAll("input, textarea").forEach(el=>{if(el.type!=="checkbox"&&el.type!=="radio"){el.value=""}else{el.checked=false}});document.querySelectorAll(".modal, .modal-edit, .modal-confirm, .carrypass-modal").forEach(modal=>{modal.classList.add("hidden");modal.classList.remove("active");modal.style.display="none"});const backdrop=document.getElementById("modalBackdrop");if(backdrop)backdrop.classList.add("hidden");document.querySelectorAll(".modal-error").forEach(errBox=>{errBox.textContent="";errBox.classList.add("hidden");errBox.classList.remove("active")});["mainPassword","username","supplementaryone","supplementarytwo","supplementarythree","supplementaryfour","supplementaryfive"].forEach(id=>{const el=document.getElementById(id);if(el)el.value=""});const savedList=document.getElementById("savedServicesList");if(savedList)savedList.innerHTML="";localStorage.clear();sessionStorage.clear();location.reload()}document.getElementById("appViewLogout").addEventListener("click",switchOff);document.getElementById("adminEditViewLogout").addEventListener("click",switchOff);document.getElementById("memberPanelLogout").addEventListener("click",switchOff);document.getElementById("memberVaultLogout").addEventListener("click",switchOff);document.getElementById("adminSetupLogout").addEventListener("click",switchOff);document.getElementById("adminEditorLoginLogout").addEventListener("click",switchOff);document.getElementById("adminBootstrapLogout").addEventListener("click",switchOff);window.addEventListener("load",checkSessionTimeout);window.addEventListener("popstate",checkSessionTimeout);window.addEventListener("hashchange",checkSessionTimeout);document.addEventListener("DOMContentLoaded",function(){lucide.createIcons()});document.addEventListener("DOMContentLoaded",()=>{const hasPasscode=!!localStorage.getItem("encryptedPasscode");if(hasPasscode){showScreen("loginView")}else{showScreen("registrationView")}});function sanitizeServiceNameStringForBase64(input){let normalized=input.normalize("NFD").replace(/[\u0300-\u036f]/g,"");const manualMap={"ß":"ss","ø":"o","Ø":"O","æ":"ae","Æ":"AE","œ":"oe","Œ":"OE","ð":"d","Ð":"D","þ":"th","Þ":"Th"};normalized=normalized.replace(/[^\x00-\x7F]/g,char=>manualMap[char]||"");return normalized.replace(/[^a-zA-Z0-9]/g,"").trim().toLowerCase()}function sanitizeStringForBase64(input){let normalized=input.normalize("NFD").replace(/[\u0300-\u036f]/g,"");const manualMap={"ß":"ss","ø":"o","Ø":"O","æ":"ae","Æ":"AE","œ":"oe","Œ":"OE","ð":"d","Ð":"D","þ":"th","Þ":"Th"};normalized=normalized.replace(/[^\x00-\x7F]/g,char=>manualMap[char]||"");return normalized.replace(/[^a-zA-Z0-9\s?!);/.,:'"@#$%^&*_\-+=<>[\]{}|\\~`]/g,"")}document.addEventListener("DOMContentLoaded",()=>{const webAddressInput=document.getElementById("webAddress");if(webAddressInput){webAddressInput.addEventListener("input",()=>{const sanitized=sanitizeServiceNameStringForBase64(webAddressInput.value);if(webAddressInput.value!==sanitized){webAddressInput.value=sanitized;webAddressInput.classList.add("input-flash");setTimeout(()=>{webAddressInput.classList.remove("input-flash")},400)}})}});document.addEventListener("DOMContentLoaded",()=>{const webAddressInputAdmin=document.getElementById("webAddressAdmin");if(webAddressInputAdmin){webAddressInputAdmin.addEventListener("input",()=>{const sanitized=sanitizeServiceNameStringForBase64(webAddressInputAdmin.value);if(webAddressInputAdmin.value!==sanitized){webAddressInputAdmin.value=sanitized;webAddressInputAdmin.classList.add("input-flash");setTimeout(()=>{webAddressInputAdmin.classList.remove("input-flash")},400)}})}});document.addEventListener("DOMContentLoaded",()=>{const memberIdInput=document.getElementById("memberId");if(memberIdInput){memberIdInput.addEventListener("input",()=>{const sanitized=sanitizeServiceNameStringForBase64(memberIdInput.value);if(memberIdInput.value!==sanitized){memberIdInput.value=sanitized;memberIdInput.classList.add("input-flash");setTimeout(()=>{memberIdInput.classList.remove("input-flash")},400)}})}});document.addEventListener("DOMContentLoaded",()=>{const passwordApp=document.getElementById("password");if(passwordApp){passwordApp.addEventListener("input",()=>{const sanitized=sanitizeStringForBase64(passwordApp.value);if(passwordApp.value!==sanitized){passwordApp.value=sanitized;passwordApp.classList.add("input-flash");setTimeout(()=>{passwordApp.classList.remove("input-flash")},400)}})}});document.addEventListener("DOMContentLoaded",()=>{const passwordAdmin=document.getElementById("passwordAdmin");if(passwordAdmin){passwordAdmin.addEventListener("input",()=>{const sanitized=sanitizeStringForBase64(passwordAdmin.value);if(passwordAdmin.value!==sanitized){passwordAdmin.value=sanitized;passwordAdmin.classList.add("input-flash");setTimeout(()=>{passwordAdmin.classList.remove("input-flash")},400)}})}});document.addEventListener("DOMContentLoaded",()=>{const passwordMember=document.getElementById("memberFinalizeMasterPassword");if(passwordMember){passwordMember.addEventListener("input",()=>{const sanitized=sanitizeStringForBase64(passwordMember.value);if(passwordMember.value!==sanitized){passwordMember.value=sanitized;passwordMember.classList.add("input-flash");setTimeout(()=>{passwordMember.classList.remove("input-flash")},400)}})}});document.addEventListener("DOMContentLoaded",()=>{const passCodeRegisterSanit=document.getElementById("passCodeInputRegister");if(passCodeRegisterSanit){passCodeRegisterSanit.addEventListener("input",()=>{const sanitized=sanitizeStringForBase64(passCodeRegisterSanit.value);if(passCodeRegisterSanit.value!==sanitized){passCodeRegisterSanit.value=sanitized;passCodeRegisterSanit.classList.add("input-flash");setTimeout(()=>{passCodeRegisterSanit.classList.remove("input-flash")},400)}})}});document.addEventListener("DOMContentLoaded",()=>{const passCodeSanit=document.getElementById("passCodeInput");if(passCodeSanit){passCodeSanit.addEventListener("input",()=>{const sanitized=sanitizeStringForBase64(passCodeSanit.value);if(passCodeSanit.value!==sanitized){passCodeSanit.value=sanitized;passCodeSanit.classList.add("input-flash");setTimeout(()=>{passCodeSanit.classList.remove("input-flash")},400)}})}});document.addEventListener("DOMContentLoaded",()=>{const passCodeEditorSanit=document.getElementById("adminPasswordEditorInput");if(passCodeEditorSanit){passCodeEditorSanit.addEventListener("input",()=>{const sanitized=sanitizeStringForBase64(passCodeEditorSanit.value);if(passCodeEditorSanit.value!==sanitized){passCodeEditorSanit.value=sanitized;passCodeEditorSanit.classList.add("input-flash");setTimeout(()=>{passCodeEditorSanit.classList.remove("input-flash")},400)}})}});document.addEventListener("DOMContentLoaded",()=>{const passCodeMemberSanit=document.getElementById("memberPassword");if(passCodeMemberSanit){passCodeMemberSanit.addEventListener("input",()=>{const sanitized=sanitizeStringForBase64(passCodeMemberSanit.value);if(passCodeMemberSanit.value!==sanitized){passCodeMemberSanit.value=sanitized;passCodeMemberSanit.classList.add("input-flash");setTimeout(()=>{passCodeMemberSanit.classList.remove("input-flash")},400)}})}});document.addEventListener("DOMContentLoaded",()=>{const passCodeExportSanit=document.getElementById("adminExportPassword");if(passCodeExportSanit){passCodeExportSanit.addEventListener("input",()=>{const sanitized=sanitizeStringForBase64(passCodeExportSanit.value);if(passCodeExportSanit.value!==sanitized){passCodeExportSanit.value=sanitized;passCodeExportSanit.classList.add("input-flash");setTimeout(()=>{passCodeExportSanit.classList.remove("input-flash")},400)}})}});document.addEventListener("DOMContentLoaded",()=>{const passCodeMemberFinalizeSanit=document.getElementById("memberFinalizeMasterPassword");if(passCodeMemberFinalizeSanit){passCodeMemberFinalizeSanit.addEventListener("input",()=>{const sanitized=sanitizeStringForBase64(passCodeMemberFinalizeSanit.value);if(passCodeMemberFinalizeSanit.value!==sanitized){passCodeMemberFinalizeSanit.value=sanitized;passCodeMemberFinalizeSanit.classList.add("input-flash");setTimeout(()=>{passCodeMemberFinalizeSanit.classList.remove("input-flash")},400)}})}});function showSmooth(element){if(!element)return;resetTimer();element.classList.add("visible")}function hideSmooth(element){if(!element)return;resetTimer();element.classList.remove("visible")}function toggleSliderState(sliderId,buttonId){const slider=document.getElementById(sliderId);const ball=document.getElementById(buttonId);var settingsState=document.getElementById("settings");resetTimer();if(slider.classList.contains("active")){slider.classList.remove("active");ball.classList.remove("active");if(buttonId=="btn1"){hideSmooth(settingsState)}}else{slider.classList.add("active");ball.classList.add("active");if(buttonId=="btn1"){showSmooth(settingsState)}}}document.getElementById("btn1").addEventListener("click",function(){toggleSliderState("slider1","btn1")});document.getElementById("btn2").addEventListener("click",function(){toggleSliderState("slider2","btn2")});function activateToggle(){const toggle1=document.getElementById("toggle1");toggle1.checked=true;const toggle2=document.getElementById("toggle2");toggle2.checked=true;const toggle3=document.getElementById("toggle3");toggle3.checked=true;const toggle4=document.getElementById("toggle4");toggle4.checked=false;const toggle5=document.getElementById("toggle5");toggle5.checked=true;const event=new Event("change");toggle1.dispatchEvent(event);toggle2.dispatchEvent(event);toggle3.dispatchEvent(event);toggle4.dispatchEvent(event);toggle5.dispatchEvent(event);resetTimer()}document.addEventListener("DOMContentLoaded",event=>{activateToggle()});document.getElementById("iterationCount").addEventListener("input",function(){const value=this.value;if(value.length>5){this.value=value.slice(0,5)}});document.getElementById("length").addEventListener("input",function(){const value=this.value;if(value.length>3){this.value=value.slice(0,3)}});document.getElementById("iterationCount").addEventListener("focus",function(){this.value=""});document.getElementById("iterationCount").addEventListener("blur",function(){if(this.value===""){this.value="100"}});document.getElementById("length").addEventListener("focus",function(){this.value=""});document.getElementById("length").addEventListener("blur",function(){if(this.value===""){this.value="28"}});document.getElementById("iterationCount").addEventListener("input",function(){if(this.value==="0"){this.value=""}else if(this.value.startsWith("0")&&this.value.length>1){this.value=this.value.slice(1)}});document.getElementById("length").addEventListener("input",function(){if(this.value==="0"){this.value=""}else if(this.value.startsWith("0")&&this.value.length>1){this.value=this.value.slice(1)}});function normalizeServiceName(service){if(!service)return"";return service.trim().toLowerCase().replace(/^https?:\/\//,"").replace(/^www\./,"")}async function collectInputData(){const button=document.getElementById("collectInput");const status=document.getElementById("generationStatus");const webAddressField=document.getElementById("webAddress");const passwordField=document.getElementById("password");if(!webAddressField.value.trim()){webAddressField.focus();return}if(!passwordField.value.trim()){passwordField.focus();return}if(passwordField.value.trim().length<12){showModalAlert("masterPasswordLength");passwordField.focus();return}button.disabled=true;status.style.visibility="visible";const webAddressInput=document.getElementById("webAddress").value;const passwordInput=document.getElementById("password").value;const lengthInput=document.getElementById("length").value;const iterationCountInput=document.getElementById("iterationCount").value;resetTimer();const uppercaseChecked=document.getElementById("toggle1").checked;const lowercaseChecked=document.getElementById("toggle2").checked;const numbersChecked=document.getElementById("toggle3").checked;const symbolsChecked=document.getElementById("toggle4").checked;const separatorChecked=document.getElementById("toggle5").checked;let charTypes={uppercase:uppercaseChecked,lowercase:lowercaseChecked,numbers:numbersChecked,symbols:symbolsChecked};const saveSliderActive=document.getElementById("slider2").classList.contains("active");if(saveSliderActive){const rawAddress=document.getElementById("webAddress").value.trim();const normalizedAddress=normalizeServiceName(rawAddress);const settings={webAddress:rawAddress,length:lengthInput,iterationCount:iterationCountInput,uppercase:uppercaseChecked,lowercase:lowercaseChecked,numbers:numbersChecked,symbols:symbolsChecked,separator:separatorChecked};await encryptSettings(normalizedAddress,settings);buildSavedServicesList();document.getElementById("slider2").classList.remove("active");document.getElementById("btn2").classList.remove("active")}clearAllPassword();setTimeout(()=>{generateDeterministicPasswordsWithAESCTR(webAddressInput,passwordInput,lengthInput,iterationCountInput,charTypes,separatorChecked);button.disabled=false;status.style.visibility="hidden";resetSingleFeedbackIcon()},10)}function deterministicInsert(str,char,seed){const hash=CryptoJS.SHA256(seed+char).words[0];const pos=Math.abs(hash)%str.length;return str.slice(0,pos)+char+str.slice(pos+1)}function segmentKeyFixedLength(password,groupSize=7,separator="-"){const chars=password.split("");const maxInsertions=Math.floor(password.length/(groupSize+1));for(let i=1;i<=maxInsertions;i++){const insertPos=i*groupSize+(i-1);if(insertPos<chars.length){chars[insertPos]=separator}}return chars.join("")}function formatKeyPass(bytes,length,charset,rules=[],input=""){let result="";const has={};const positions=[];for(let i=0;i<bytes.words.length*4;i++){const byte=bytes.words[Math.floor(i/4)]>>24-i%4*8&255;const char=charset.charAt(byte%charset.length);result+=char;positions.push(char);rules.forEach(rule=>{if(!has[rule]&&new RegExp(rule).test(char)){has[rule]=i}});if(result.length>=length)break}result=result.slice(0,length).split("");rules.forEach(rule=>{if(!(rule in has)){let insertChar="?";if(rule==="[A-Z]")insertChar="G";if(rule==="[a-z]")insertChar="g";if(rule==="[0-9]")insertChar="4";if(rule==="[!@#$%^&*()\\-_=+\\[\\]{}|;:,.<>?]")insertChar="!";let insertPos=input.charCodeAt(0)%result.length;let safetyCounter=0;while(rules.some(r=>has[r]===insertPos)&&safetyCounter<result.length){insertPos=(insertPos+1)%result.length;safetyCounter++}result[insertPos]=insertChar}});return result.join("")}const PASSWORDCHARSETS={upperAlpha:"ZJVEQSLBWRGNMYXDOCHIPATUKF",lowerAlpha:"pvjaqukxhyngorfizwmtlbdecs",numbers:"72940538615784216903",special:"!@#&$%*^()_+[]{}|;:,.<>?/"};function getEffectivePBKDF2Iterations(userInput){const parsed=parseInt(userInput);const input=isNaN(parsed)||parsed<1?1:parsed;let iterations;if(input>66666){iterations=Math.floor((1e5+input)/3)}else if(input>33333){iterations=Math.floor((5e4+input)/3)}else{iterations=Math.floor((2e4+input)/3)}return Math.max(1e3,iterations)}function colorizePassword(password){return password.split("").map(char=>{if(/[a-z]/.test(char))return`<span class="lower">${char}</span>`;if(/[A-Z]/.test(char))return`<span class="upper">${char}</span>`;if(/[0-9]/.test(char))return`<span class="digit">${char}</span>`;if(/[^a-zA-Z0-9]/.test(char))return`<span class="symbol">${char}</span>`;return char}).join("")}async function generateDeterministicPasswordsWithAESCTR(webAddress,masterPassword,length,iterationCount,charTypes,segmented=false){const supplementaryInputs=["mainPassword","supplementaryone","supplementarytwo","supplementarythree","supplementaryfour","supplementaryfive"];const normalizedService=normalizeServiceName(webAddress);let charset="";if(charTypes.uppercase)charset+=PASSWORDCHARSETS.upperAlpha;if(charTypes.lowercase)charset+=PASSWORDCHARSETS.lowerAlpha;if(charTypes.numbers)charset+=PASSWORDCHARSETS.numbers;if(charTypes.symbols)charset+=PASSWORDCHARSETS.special;if(!charset){showModalAlert("selectMinCharType");return[]}const saltInputArgon=normalizedService+"::"+iterationCount+"::"+length;const argonSalt=(new TextEncoder).encode(saltInputArgon);const options=mapArgonOptions(iterationCount);const argonHash=await argon2.hash({pass:masterPassword,salt:argonSalt,...options,hashLen:32,raw:true});const argonEnhancer=Array.from(argonHash.hash).map(b=>b.toString(16).padStart(2,"0")).join("");const saltInput=normalizedService+"::"+iterationCount+"::"+length+"::"+argonEnhancer;const salt=CryptoJS.SHA256(saltInput).toString();const key=CryptoJS.PBKDF2(masterPassword,salt,{keySize:256/32,iterations:getEffectivePBKDF2Iterations(iterationCount),hasher:CryptoJS.algo.SHA256});for(let index=0;index<6;index++){let stream=CryptoJS.lib.WordArray.create();let blockCounter=0;while(stream.words.length*4<length*2){const counterIvHex=CryptoJS.SHA256(`pwgen::${normalizedService}::${index}::${blockCounter}`).toString().substring(0,32);const iv=CryptoJS.enc.Hex.parse(counterIvHex);const inputBlock=CryptoJS.enc.Hex.parse("00000000000000000000000000000000");const encrypted=CryptoJS.AES.encrypt(inputBlock,key,{mode:CryptoJS.mode.CTR,iv:iv,padding:CryptoJS.pad.NoPadding});stream=CryptoJS.lib.WordArray.create(stream.words.concat(encrypted.ciphertext.words));blockCounter++}const rules=[];if(charTypes.uppercase)rules.push("[A-Z]");if(charTypes.lowercase)rules.push("[a-z]");if(charTypes.numbers)rules.push("[0-9]");if(charTypes.symbols)rules.push("[!@#$%^&*()\\-_=+\\[\\]{}|;:,.<>?]");let password=formatKeyPass(stream,length,charset,rules,normalizedService);if(segmented){password=segmentKeyFixedLength(password,7,"-")}const target=document.getElementById(supplementaryInputs[index]);if(target.tagName==="DIV"){target.innerHTML=colorizePassword(password)}else{target.value=password}}const keyPass=document.getElementById("mainPassword").value;const generated=document.getElementById("generatedPassword");showSmooth(generated);generatePasswordAndTrigger(keyPass);generateUsername();document.getElementById("createdfor").innerHTML="<b>"+webAddress+"</b>";document.getElementById("webAddress").value="";document.getElementById("password").value="";document.getElementById("password").disabled=true;document.getElementById("generationStatus").style.visibility="hidden";const dot=document.getElementById("dot");dot.style.backgroundColor="#e7f1ff";updateCounter();resetTimer()}function mapArgonOptions(iterationCountInput){const parsed=parseInt(iterationCountInput);const input=isNaN(parsed)?1:parsed;let time=2;let mem=65536;if(input>66666){time=5;mem=196608}else if(input>33333){time=3;mem=131072}const parallelism=1;return{time:time,mem:mem,parallelism:parallelism,type:argon2.ArgonType.Argon2id}}document.addEventListener("DOMContentLoaded",()=>{const webAddress=document.getElementById("webAddress");const password=document.getElementById("password");if(!webAddress||!password)return;webAddress.addEventListener("input",()=>{if(webAddress.value.trim().length>0){password.disabled=false}else{password.disabled=true;password.value=""}})});document.addEventListener("DOMContentLoaded",()=>{const toggle1=document.getElementById("toggle1");const toggle2=document.getElementById("toggle2");const toggle3=document.getElementById("toggle3");const toggle4=document.getElementById("toggle4");const trackedToggles=[toggle1,toggle2,toggle3,toggle4];trackedToggles.forEach(toggle=>{toggle.addEventListener("change",()=>{const checkedCount=trackedToggles.filter(t=>t.checked).length;if(checkedCount===0){toggle.checked=true;const container=toggle.closest(".toggle-container");if(container){container.classList.add("bounce");setTimeout(()=>{container.classList.remove("bounce")},300)}}})})});document.getElementById("displayAdditional").addEventListener("click",function(){const explanation=document.getElementById("additionalPasswords");if(!explanation)return;if(explanation.classList.contains("visible")){hideSmooth(explanation)}else{showSmooth(explanation)}});function tWithVars(key,vars={}){const lang=localStorage.getItem("preferredLanguage")||"en";let template=translations[lang]?.[key]||key;for(const[k,v]of Object.entries(vars)){template=template.replace(new RegExp(`\\$\\{${k}\\}`,"g"),v)}return template}function buildSavedServicesList(){const listContainer=document.getElementById("savedServicesList");listContainer.innerHTML="";for(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(key.startsWith("encryptedSettings_")){const serviceName=key.replace("encryptedSettings_","");const li=document.createElement("li");li.style.display="flex";li.style.alignItems="center";li.style.justifyContent="space-between";li.style.marginBottom="0.5rem";const link=document.createElement("a");link.href="#toggleSavedServices";link.textContent=serviceName;link.style.marginRight="1rem";link.style.color="#1E003B";link.style.textDecoration="none";link.style.flexGrow="1";link.addEventListener("click",e=>{e.preventDefault();document.getElementById("webAddress").value=serviceName;const passwordField=document.getElementById("password");if(passwordField){passwordField.disabled=false}document.getElementById("webAddress").dispatchEvent(new Event("blur"));const panel=document.getElementById("savedServicesPanel");if(panel){panel.classList.remove("open")}});const trashWrapper=document.createElement("button");trashWrapper.style.background="none";trashWrapper.style.border="none";trashWrapper.style.cursor="pointer";trashWrapper.style.padding="0";trashWrapper.style.marginLeft="0.5rem";trashWrapper.style.display="flex";trashWrapper.style.alignItems="center";trashWrapper.setAttribute("aria-label","Delete service");const trashIcon=document.createElement("i");trashIcon.setAttribute("data-lucide","trash-2");trashIcon.style.width="20px";trashIcon.style.height="20px";trashIcon.style.color="#842029";trashWrapper.appendChild(trashIcon);trashWrapper.addEventListener("click",event=>{event.stopPropagation();event.preventDefault();const message=tWithVars("deleteServiceConfirm",{service:serviceName});showConfirmation(message,confirmed=>{if(confirmed){localStorage.removeItem(`encryptedSettings_${serviceName}`);buildSavedServicesList();const manageButton=document.getElementById("toggleSavedServices");if(manageButton){manageButton.classList.add("import-delete-flash");setTimeout(()=>{manageButton.classList.remove("import-delete-flash")},1e3)}}})});li.appendChild(link);li.appendChild(trashWrapper);listContainer.appendChild(li)}}if(typeof lucide!=="undefined"){lucide.createIcons()}}let pendingDeleteService=null;function showDeleteModal(serviceName){const modal=document.getElementById("confirmationModal");const modalMessage=document.getElementById("confirmationMessage");pendingDeleteService=serviceName;modalMessage.innerHTML=`
      Delete stored settings for <strong>${serviceName}</strong>?
      // <div style="margin-top: 1.5rem;">
      //   <button id="confirmDeleteBtn" class="btn strong" style="margin-right: 1rem;">Delete</button>
      //   <button id="cancelDeleteBtn" class="btn secondary">Cancel</button>
      // </div>
    `;modal.style.display="block";document.getElementById("confirmDeleteBtn").addEventListener("click",()=>{if(pendingDeleteService){localStorage.removeItem(`encryptedSettings_${pendingDeleteService}`);pendingDeleteService=null;buildSavedServicesList();modal.style.display="none"}});document.getElementById("cancelDeleteBtn").addEventListener("click",()=>{pendingDeleteService=null;modal.style.display="none"});const closeBtn=modal.querySelector(".close");if(closeBtn){closeBtn.onclick=()=>{pendingDeleteService=null;modal.style.display="none"}}}document.getElementById("savedServicesSearch").addEventListener("input",function(){const filter=this.value.toLowerCase();const listItems=document.querySelectorAll("#savedServicesList li");listItems.forEach(li=>{const text=li.querySelector("a")?.textContent.toLowerCase()||"";if(text.includes(filter)){li.style.display="flex"}else{li.style.display="none"}})});document.addEventListener("DOMContentLoaded",()=>{const toggleButton=document.getElementById("toggleSavedServices");const panel=document.getElementById("savedServicesPanel");if(!toggleButton||!panel)return;toggleButton.addEventListener("click",()=>{panel.classList.toggle("open")})});async function deriveKeyFromPasscode(passcode,salt){const encoder=new TextEncoder;const passkey=await crypto.subtle.importKey("raw",encoder.encode(passcode),"PBKDF2",false,["deriveKey"]);return crypto.subtle.deriveKey({name:"PBKDF2",salt:salt,iterations:1e5,hash:"SHA-256"},passkey,{name:"AES-GCM",length:256},false,["encrypt","decrypt"])}async function encryptPasswordCpsData(plaintext,passcode){resetTimer();const encoder=new TextEncoder;const data=encoder.encode(plaintext);const salt=crypto.getRandomValues(new Uint8Array(16));const iv=crypto.getRandomValues(new Uint8Array(12));const key=await deriveKeyFromPasscode(passcode,salt);const ciphertext=await crypto.subtle.encrypt({name:"AES-GCM",iv:iv},key,data);const encryptedBlob=new Uint8Array(salt.byteLength+iv.byteLength+ciphertext.byteLength);encryptedBlob.set(salt,0);encryptedBlob.set(iv,salt.byteLength);encryptedBlob.set(new Uint8Array(ciphertext),salt.byteLength+iv.byteLength);return encryptedBlob}async function decryptPasswordCpsData(encryptedBlob,passcode){try{const salt=encryptedBlob.slice(0,16);const iv=encryptedBlob.slice(16,28);const ciphertext=encryptedBlob.slice(28);const key=await deriveKeyFromPasscode(passcode,salt);const plaintextBuffer=await crypto.subtle.decrypt({name:"AES-GCM",iv:iv},key,ciphertext);resetTimer();const decoder=new TextDecoder;return decoder.decode(plaintextBuffer)}catch(err){console.error("Decryption failed:",err.name,err.message||err);throw new Error("Decryption failed — likely due to passcode mismatch or corrupted file.")}}function openCarryPasscodeModal(title="Enter Password"){const modal=document.getElementById("exportImportModal");const modalTitle=document.getElementById("exportImportModalTitle");const input=document.getElementById("exportImportModalInput");const okBtn=document.getElementById("exportImportModalOK");const cancelBtn=document.getElementById("exportImportModalCancel");const errorBox=document.getElementById("exportImportModalError");modalTitle.textContent=t(title);modal.classList.remove("hidden");modal.classList.add("active");input.value="";input.focus();errorBox.textContent="";errorBox.classList.remove("active");errorBox.classList.add("hidden");let resolvePass,rejectPass;const passPromise=new Promise((resolve,reject)=>{resolvePass=resolve;rejectPass=reject});function closeModal(){modal.classList.remove("active");modal.classList.add("hidden");okBtn.removeEventListener("click",okHandler);cancelBtn.removeEventListener("click",cancelHandler);input.removeEventListener("keydown",keyHandler)}function okHandler(){const passcode=input.value.trim();resolvePass(passcode)}function cancelHandler(){closeModal();rejectPass(new Error("User cancelled"))}function keyHandler(e){if(e.key==="Enter")okHandler();if(e.key==="Escape")cancelHandler()}okBtn.addEventListener("click",okHandler);cancelBtn.addEventListener("click",cancelHandler);input.addEventListener("keydown",keyHandler);function showError(message){errorBox.textContent=t(message);errorBox.classList.remove("hidden");errorBox.classList.add("active");errorBox.classList.remove("shake");void errorBox.offsetWidth;errorBox.classList.add("shake")}return{passPromise:passPromise,showError:showError,close:closeModal}}async function exportEncryptedSettings(passcode){const exportData={};for(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(key.startsWith("encryptedSettings_")){exportData[key]=JSON.parse(localStorage.getItem(key))}}resetTimer();const jsonData=JSON.stringify(exportData);const encryptedBlob=await encryptPasswordCpsData(jsonData,passcode);const blob=new Blob([encryptedBlob],{type:"application/octet-stream"});const url=URL.createObjectURL(blob);const a=document.createElement("a");a.href=url;a.download="carrypass-encrypted-settings.cps";document.body.appendChild(a);a.click();document.body.removeChild(a);URL.revokeObjectURL(url)}function showError(message){errorBox.textContent=t(message);errorBox.classList.remove("hidden");errorBox.classList.add("active");errorBox.classList.remove("shake");void errorBox.offsetWidth;errorBox.classList.add("shake")}async function tryUnlockEncryptedVaultFile(file){while(true){const{passPromise,showError,close}=openCarryPasscodeModal("importPassword");try{const passcode=await passPromise;await importEncryptedSettings(file,passcode);close();break}catch(err){if(err.message==="User cancelled")break;showError("passcodeError");await new Promise(resolve=>setTimeout(resolve,2e3))}}}async function importEncryptedSettings(file,passcode){const arrayBuffer=await file.arrayBuffer();const encryptedBlob=new Uint8Array(arrayBuffer);const decryptedText=await decryptPasswordCpsData(encryptedBlob,passcode);const importedData=JSON.parse(decryptedText);for(const[key,value]of Object.entries(importedData)){if(key.startsWith("encryptedSettings_")){localStorage.setItem(key,JSON.stringify(value))}}buildSavedServicesList();resetTimer();const manageButton=document.getElementById("toggleSavedServices");if(manageButton){manageButton.classList.add("import-success-flash");setTimeout(()=>{manageButton.classList.remove("import-success-flash")},1200)}}function triggerImportEncryptedSettings(file){const modal=document.getElementById("exportModal");(async()=>{try{while(true){try{const passcode=await openCarryPasscodeModal("importPassword");await importEncryptedSettings(file,passcode);modal.closeModal();break}catch(err){if(err.message==="User cancelled")break;if(modal&&modal.showError){modal.showError("passcodeError")}}}}catch{}})()}document.addEventListener("DOMContentLoaded",()=>{const exportButton=document.getElementById("exportSettingsButton");if(exportButton){exportButton.addEventListener("click",async()=>{const{passPromise,close,showError}=openCarryPasscodeModal("exportPassword");try{const passcode=await passPromise;await exportEncryptedSettings(passcode);close()}catch(err){if(err.message==="User cancelled")return;showError("failedExportError")}})}const importButton=document.getElementById("importSettingsButton");if(importButton){importButton.addEventListener("click",()=>{const fileInput=document.createElement("input");fileInput.type="file";fileInput.accept=".cps";fileInput.onchange=async e=>{const file=e.target.files[0];if(file){await tryUnlockEncryptedVaultFile(file)}};fileInput.click()})}});async function deriveAESKey(strongPassword,salt){const enc=(new TextEncoder).encode(strongPassword);const keyMaterial=await crypto.subtle.importKey("raw",enc,"PBKDF2",false,["deriveKey"]);return await crypto.subtle.deriveKey({name:"PBKDF2",salt:salt,iterations:1e5,hash:"SHA-256"},keyMaterial,{name:"AES-GCM",length:256},false,["encrypt","decrypt"])}async function encryptAESGCM(plaintext,key,iv){const enc=(new TextEncoder).encode(plaintext);const encrypted=await crypto.subtle.encrypt({name:"AES-GCM",iv:iv},key,enc);return btoa(String.fromCharCode(...new Uint8Array(encrypted)))}async function decryptAESGCM(ciphertext,key,iv){const data=Uint8Array.from(atob(ciphertext),c=>c.charCodeAt(0));const decrypted=await crypto.subtle.decrypt({name:"AES-GCM",iv:iv},key,data);return(new TextDecoder).decode(decrypted)}function parseAccessSettingsString(settingsStr){const flags=settingsStr.slice(0,4).toUpperCase();const rest=settingsStr.slice(4);const webAddressMatch=rest.match(/^[A-Z]+/i);if(!webAddressMatch)throw new Error("Invalid access settings string");const webAddress=webAddressMatch[0];const numericPart=rest.slice(webAddress.length);const length=parseInt(numericPart.slice(0,2),10);const iterationCount=parseInt(numericPart.slice(2),10);return{flags:flags,webAddress:webAddress,length:length,iterationCount:iterationCount,charTypes:{letters:flags[0]==="C",numbers:flags[1]==="C",symbols:flags[2]==="C"},separator:flags[3]==="C"}}async function generateStrongPasswordFromAccessSettings(accessSettings,masterPassword){const parsed=parseAccessSettingsString(accessSettings);return await generateDeterministicPassword(parsed.webAddress,masterPassword,parsed.length,parsed.iterationCount,parsed.charTypes,parsed.separator)}async function generateDeterministicPassword(webAddress,masterPassword,length,iterationCount,charTypes,separator){const charset=buildCharset(charTypes);const salt=webAddress+"::"+iterationCount;const keyMaterial=CryptoJS.PBKDF2(masterPassword+salt,salt,{keySize:length/4,iterations:iterationCount,hasher:CryptoJS.algo.SHA256});let password="";const words=keyMaterial.words;for(let i=0;i<length;i++){const byte=words[Math.floor(i/4)]>>24-i%4*8&255;password+=charset.charAt(byte%charset.length)}return separator?password.match(/.{1,7}/g).join("-"):password}function translateDynamicElement(root){root.querySelectorAll("[data-i18n]").forEach(el=>{const key=el.getAttribute("data-i18n");el.innerHTML=t(key)});root.querySelectorAll("[data-i18n-tooltip]").forEach(el=>{const key=el.getAttribute("data-i18n-tooltip");el.innerHTML=t(key)});root.querySelectorAll("[data-i18n-title]").forEach(el=>{const key=el.getAttribute("data-i18n-title");el.innerText=t(key);el.title=t(key)});root.querySelectorAll("[data-i18n-placeholder]").forEach(el=>{const key=el.getAttribute("data-i18n-placeholder");el.placeholder=t(key)});root.querySelectorAll("[data-i18n-value]").forEach(el=>{const key=el.getAttribute("data-i18n-value");const translated=t(key);if("value"in el){el.value=translated}else{el.innerText=translated}})}function renderMemberVault(decryptedVault){const container1=document.getElementById("memberVaultContent1");const container2=document.getElementById("memberVaultContent2");container1.innerHTML="";container2.innerHTML="";let counter=0;Object.entries(decryptedVault.team_data||{}).forEach(([teamId,team])=>{const targetContainer=counter%2===0?container1:container2;counter++;const teamBlock=document.createElement("div");teamBlock.className="team-section card";teamBlock.innerHTML=`<h4>${t("teamHeading",{name:team.name})}</h4>`;const creds=team.credentials||[];if(creds.length===0){teamBlock.innerHTML+=`<p>${t("noCredentialsInTeam")}</p>`}else{creds.forEach((cred,index)=>{const uniqueSuffix=`${teamId}__${index}`;const credBlock=document.createElement("div");credBlock.className="credential-block";credBlock.innerHTML=`
          <strong>${cred.label}</strong><br>
          <div style="width: 100%; text-align: left;">
          <label style="margin-right:auto" data-i18n="generatedUsernameLabel">Username</label>
          </div>
          <div class="input-group">
            <input id="credBlockUsername__${uniqueSuffix}" readonly value="${cred.username}">
            <button data-password-id="credBlockUsername__${uniqueSuffix}" type="button" class="btn outline-gold" name="credBlockUsername__${uniqueSuffix}" data-i18n="copyButton">Copy</button>
            <span id="copySuccessIcon-credBlockUsername__${uniqueSuffix}" class="icon" style="display: none;"></span>
          </div>
          <div style="width: 100%; text-align: left;">
          <label style="margin-right:auto" data-i18n="editCredPassword">Password</label>
          </div>
          <div class="input-group">
            <input id="credBlockPassword__${uniqueSuffix}" readonly type="password" value="${cred.password}">
            <button type="button" id="credBlockShow__${uniqueSuffix}" class="btn secondary-outline" name="credBlockPassword__${uniqueSuffix}" data-i18n="showButton">Show</button>
            <button data-password-id="credBlockPassword__${uniqueSuffix}" type="button" class="btn outline-gold" name="credBlockPassword__${uniqueSuffix}" data-i18n="copyButton">Copy</button>
            <span id="copySuccessIcon-credBlockPassword__${uniqueSuffix}" class="icon" style="display: none;"></span>
          </div>
          <div style="width: 100%; text-align: left;">
          <label style="margin-right:auto" data-i18n="editCredUrl">Service URL</label>
          </div>
          <div class="input-group">
            <input readonly value="${cred.url}">
            <button type="button" class="btn secondary-outline open-url-button" style="margin-left:auto;" data-url="${cred.url}" data-i18n="openButton">Open</button>
          </div>
          <div style="width: 100%; text-align: left;">
          <label style="margin-right:auto" data-i18n="editCredNotes">Notes</label>
          </div>
          <textarea readonly>${cred.notes||""}</textarea>
        `;teamBlock.appendChild(credBlock);translateDynamicElement(credBlock)})}targetContainer.appendChild(teamBlock)})}function openMemberFinalizeModal(memberId){document.getElementById("memberFinalizeUsername").value=memberId;document.getElementById("memberFinalizeMasterPassword").value="";const modal=document.getElementById("memberFinalizeModal");modal.classList.add("active");modal.classList.remove("hidden")}function closeMemberFinalizeModal(){const modal=document.getElementById("memberFinalizeModal");modal.classList.add("hidden");modal.classList.remove("active");document.getElementById("memberFinalizeUsername").value="";document.getElementById("memberFinalizeMasterPassword").value="";document.getElementById("passwordStrengthBarMember").innerText="";document.getElementById("passwordStrengthTextMember").innerText="";document.getElementById("entropyTextMember").innerText=""}function hexToBytes(hex){const bytes=new Uint8Array(hex.length/2);for(let i=0;i<bytes.length;i++){bytes[i]=parseInt(hex.substr(i*2,2),16)}return bytes}async function finalizeMember(){let memberId=document.getElementById("memberFinalizeUsername").value;let memberPassword=document.getElementById("memberFinalizeMasterPassword").value;if(!memberPassword){showModalAlert("memberPwdRequired");return}if(!isPasswordStrongEnough(memberPassword)){showModalAlert("lowEntropy");return}if(!vault||!vault.members)throw new Error("❗ Vault or members section not initialized");const member=vault.members[memberId];if(!member)throw new Error("❗ Member not found");const salt=crypto.getRandomValues(new Uint8Array(16));const finalSalt=await getFinalSalt(salt,memberPassword);const enc=new TextEncoder;const keyMaterial=await crypto.subtle.importKey("raw",enc.encode(memberPassword),{name:"PBKDF2"},false,["deriveBits","deriveKey"]);const derivedKey=await crypto.subtle.deriveKey({name:"PBKDF2",salt:finalSalt,iterations:3e5,hash:"SHA-256"},keyMaterial,{name:"AES-GCM",length:256},true,["encrypt","decrypt"]);const exportedKey=await crypto.subtle.exportKey("raw",derivedKey);const derivedKeyBase64=arrayBufferToBase64(exportedKey);member.encrypted_vault.password_derived_key=derivedKeyBase64;member.vault_metadata.salt=arrayBufferToBase64(salt);member.vault_metadata.pending=false;const flavour="Vortex";const newTOTP=generateBase32Secret(20);const encryptedTOTP=await encryptData(newTOTP,memberId,memberPassword,flavour);member.encrypted_vault.totp=encryptedTOTP;generateQRCodeForMember(member.encrypted_vault.name,memberId,newTOTP);logAdminAction("member_finalized",{member_id:member.encrypted_vault.id,member_name:member.encrypted_vault.name});updateMembersList();updateAssignmentsUI();closeMemberFinalizeModal()}function arrayBufferToBase64(buffer){const bytes=new Uint8Array(buffer);let binary="";for(let b of bytes)binary+=String.fromCharCode(b);return btoa(binary)}function base64ToArrayBuffer(base64){try{if(!base64||typeof base64!=="string"){throw new Error("Input must be a base64 string")}const binary=atob(base64);const bytes=new Uint8Array(binary.length);for(let i=0;i<binary.length;i++){bytes[i]=binary.charCodeAt(i)}return bytes.buffer}catch(e){console.error("❗ base64ToArrayBuffer failed:",e);throw new Error("Invalid base64 input")}}function showExportModal(){const modal=document.getElementById("exportVaultModal");modal.classList.remove("hidden");modal.classList.add("active")}function closeExportModal(){const modal=document.getElementById("exportVaultModal");const masterPassword=document.getElementById("adminExportPassword");const vaultExpiry=document.getElementById("vaultExpiry");const passwordStrengthBarAdmin=document.getElementById("passwordStrengthBarAdmin");const passwordStrengthTextAdmin=document.getElementById("passwordStrengthTextAdmin");const entropyTextAdmin=document.getElementById("entropyTextAdmin");masterPassword.value="";vaultExpiry.value="";passwordStrengthBarAdmin.innerText="";passwordStrengthTextAdmin.innerText="";entropyTextAdmin.innerText="";modal.classList.remove("active");modal.classList.add("hidden")}let _currentAssigningMemberId=null;function openAssignMemberToTeamModal(memberId){_currentAssigningMemberId=memberId;const member=vault.members[memberId];document.getElementById("assignMemberNameLabel").textContent=t("assignToMember",{assignedMember:member.encrypted_vault.name});const teamSelect=document.getElementById("assignTeamSelect");teamSelect.innerHTML="";Object.entries(vault.teams).forEach(([teamId,team])=>{const option=document.createElement("option");option.value=teamId;option.textContent=team.encrypted_team.name;teamSelect.appendChild(option)});document.getElementById("assignMemberModal").classList.remove("hidden")}function closeAssignMemberModal(){document.getElementById("assignMemberModal").classList.add("hidden");_currentAssigningMemberId=null}function confirmAssignMemberToTeam(){const teamId=document.getElementById("assignTeamSelect").value;if(!_currentAssigningMemberId||!teamId){showModalAlert("teamMmemberSelectReq");return}assignMemberToTeamAdminTool(_currentAssigningMemberId,teamId);updateAssignmentsUI();closeAssignMemberModal()}async function assignMemberToTeamAdminTool(memberId,teamId){const member=vault.members[memberId];const team=vault.teams[teamId];if(!member||!team){console.error("❗ Invalid member or team.");return}if(!member.encrypted_vault.team_keys){member.encrypted_vault.team_keys={}}member.encrypted_vault.team_keys[teamId]={data:team.encrypted_team.password_derived_key};logAdminAction("team_assigned_to_member",{member_id:memberId,team_id:teamId})}function generateId(){return Math.random().toString(36).substring(2,10)}let finalizeTargetMemberId=null;const VAULT_SYSTEM_KEY=CryptoJS.enc.Utf8.parse("CarryPassTemporaryKey123!");async function deriveKeyWithArgon2(password,salt){const passwordBytes=(new TextEncoder).encode(password);const saltBytes=(new TextEncoder).encode(salt);const keyMaterial=await crypto.subtle.importKey("raw",passwordBytes,{name:"PBKDF2"},false,["deriveBits","deriveKey"]);const derivedBits=await crypto.subtle.deriveBits({name:"PBKDF2",salt:saltBytes,iterations:1e5,hash:"SHA-256"},keyMaterial,256);return derivedBits}async function generatePseudoPad(accessSettings,strongPassword,variant="Vortex"){const base=accessSettings+strongPassword+variant;const hash=CryptoJS.SHA256(base).toString(CryptoJS.enc.Hex);const saltHex=hash.substring(0,32);const ivHex=hash.substring(32,32+24);return{salt:hexToBytes(saltHex),iv:hexToBytes(ivHex)}}function hexToBytes(hex){const bytes=new Uint8Array(hex.length/2);for(let i=0;i<bytes.length;i++){bytes[i]=parseInt(hex.substr(i*2,2),16)}return bytes}async function encryptData(contentText,accessSettings,masterPassword,variant="Vortex"){const{salt,iv}=await generatePseudoPad(accessSettings,masterPassword,variant);const keyRaw=await deriveKeyWithArgon2(masterPassword,salt);const key=await crypto.subtle.importKey("raw",keyRaw,{name:"AES-GCM"},false,["encrypt"]);const encrypted=await crypto.subtle.encrypt({name:"AES-GCM",iv:iv},key,(new TextEncoder).encode(contentText));return btoa(String.fromCharCode.apply(null,new Uint8Array(encrypted)))}function normalizeServiceName(service){if(!service)return"";return service.trim().toLowerCase().replace(/^https?:\/\//,"").replace(/^www\\./,"")}function buildCharset(charTypes){let charset="";if(charTypes.letters)charset+=PASSWORDCHARSETS.upperAlpha+PASSWORDCHARSETS.lowerAlpha;if(charTypes.numbers)charset+=PASSWORDCHARSETS.numbers;if(charTypes.symbols)charset+=PASSWORDCHARSETS.special;return charset}function generateNumbers(seed){const result=[];for(let i=0;i<6;i++){let hash=CryptoJS.SHA256(seed+i).toString();let num=parseInt(hash.substring(0,8),16);result.push(num)}return result}async function encryptWithGCM(plaintext,accessSettings,masterPassword,variant="Vortex"){const strongPassword=await generateStrongPasswordFromAccessSettings(accessSettings,masterPassword);const{salt,iv}=await generatePseudoPad(accessSettings,strongPassword,variant);const keyRaw=await deriveKeyWithArgon2(strongPassword,salt);const key=await crypto.subtle.importKey("raw",keyRaw,{name:"AES-GCM"},false,["encrypt"]);const encrypted=await crypto.subtle.encrypt({name:"AES-GCM",iv:iv},key,(new TextEncoder).encode(plaintext));return btoa(String.fromCharCode.apply(null,new Uint8Array(encrypted)))}function onAdminEntry(){resetTimer();checkVaultExistence()}function decryptTOTPSecret(encryptedBase64,accessKey){const decrypted=CryptoJS.AES.decrypt(encryptedBase64,accessKey);return decrypted.toString(CryptoJS.enc.Utf8)}function base32ToBytes(base32){const alphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";let bits="";for(let i=0;i<base32.length;i++){const val=alphabet.indexOf(base32[i].toUpperCase());if(val===-1)continue;bits+=val.toString(2).padStart(5,"0")}const bytes=[];for(let i=0;i+8<=bits.length;i+=8){bytes.push(parseInt(bits.substr(i,8),2))}return bytes}function generateTOTP(secret,timeOffset=0){const epoch=Math.floor(Date.now()/1e3);const time=Math.floor(epoch/30)+timeOffset;const key=base32ToBytes(secret);const timeBytes=new Uint8Array(8);let t=time;for(let i=7;i>=0;i--){timeBytes[i]=t&255;t>>=8}const cryptoKey=new Uint8Array(key);const hmac=CryptoJS.HmacSHA1(CryptoJS.lib.WordArray.create(timeBytes),CryptoJS.lib.WordArray.create(cryptoKey));const h=hmac.toString(CryptoJS.enc.Hex);const offset=parseInt(h.substring(h.length-1),16);const binary=parseInt(h.substr(offset*2,8),16)&2147483647;return(binary%1e6).toString().padStart(6,"0")}async function loadAdminConfig(){try{const res=await fetch("/vault/admin-config.json");if(!res.ok)throw new Error("Admin config not found");const json=await res.json();adminConfig=json}catch(err){}}async function adminUnlockVault(){const adminAccess=document.getElementById("adminAccessInput").value.trim();const adminPassword=document.getElementById("adminPasswordInput").value.trim();const totpCode=document.getElementById("adminTOTPInput").value.trim();if(!adminAccess||!adminPassword){showModalAlert("vaultSetupWarning");return}try{const vaultResponse=await fetch("/vault/team-vault.json");const vaultJson=await vaultResponse.json();const strongAdminPassword=await generateStrongPasswordFromAccessSettings(adminAccess,adminPassword);const{salt,iv}=await generatePseudoPad(adminAccess,strongAdminPassword,vaultJson.vault_metadata.flavour);const adminKey=await deriveAESKey(strongAdminPassword,salt);const encryptedAdminBuffer=Uint8Array.from(atob(vaultJson.encrypted_admin_section),c=>c.charCodeAt(0));const decrypted=await decryptAESGCM(encryptedAdminBuffer.buffer,adminKey,iv);const adminData=JSON.parse(decrypted);if(adminData.admin_totp){const decryptedTOTP=await decryptTOTPSecret(adminData.admin_totp,strongAdminPassword);const expected=generateTOTP(decryptedTOTP);if(totpCode!==expected)throw new Error("Invalid TOTP code for Admin vault")}vault={vault_metadata:vaultJson.vault_metadata,admin_data:adminData,team_blocks:vaultJson.team_blocks,members_section:vaultJson.members_section};updateAllUI();showScreen("adminPanel")}catch(error){try{const strongPassword=await generateStrongPasswordFromAccessSettings(adminAccess,adminPassword);const{salt,iv}=await generatePseudoPad(adminAccess,strongPassword,"Vortex");const aesKey=await deriveAESKey(strongPassword,salt);const decryptedTOTP=await decryptAESGCM(adminConfig.totp_encrypted_secret,aesKey,iv);const expectedCode=generateTOTP(decryptedTOTP);if(totpCode!==expectedCode){throw new Error("Invalid TOTP code")}showModalAlert("adminIdentityVerified");vault={admin_vault_metadata:{created_at:(new Date).toISOString(),flavour:adminConfig.access_flavour||"Vortex",expiry:"",nonce:"",salt:"",checksum:""},admin:"",teams:{},members:{}};updateAllUI();showScreen("adminPanel");adminConfig=null}catch(setupError){console.error(setupError);showModalAlert("adminIdentityFailed")}}}async function decryptAndLoadVault(vaultJson,adminAccess,adminPassword,totpCode){const flavour=vaultJson.vault_metadata?.flavour||"Vortex";const strongAdminPassword=await generateStrongPasswordFromAccessSettings(adminAccess,adminPassword);const{salt,iv}=await generatePseudoPad(adminAccess,strongAdminPassword,flavour);const adminKey=await deriveAESKey(strongAdminPassword,salt);try{const encryptedData=atob(vaultJson.encrypted_admin_section);const encryptedBytes=Uint8Array.from(encryptedData,c=>c.charCodeAt(0));const decrypted=await decryptAESGCM(encryptedBytes,adminKey,iv);const adminData=JSON.parse(decrypted);if(adminData.admin_totp){const decryptedTOTP=await decryptTOTPSecret(adminData.admin_totp,strongAdminPassword);const expected=generateTOTP(decryptedTOTP);if(totpCode!==expected){throw new Error("Invalid TOTP code for Admin vault")}}vault={vault_metadata:vaultJson.vault_metadata,admin_data:adminData,team_blocks:vaultJson.team_blocks||{},members_section:vaultJson.members_section||{}};updateAllUI();showScreen("adminPanel")}catch(err){console.error("❗ Failed to decrypt and load vault:",err);showModalAlert("❗ Failed to decrypt and load vault. Check console for details.")}}function updateAllUI(){lucide.createIcons();updateTeamList();updateMembersList();updateAssignmentsUI();updateCredentialsList();updateVaultExpirationDisplay()}function updateVaultExpirationDisplay(){if(vault.adminMetadata?.expiry){const expiryField=document.getElementById("vaultExpirationDisplay");if(expiryField){expiryField.innerText=vault.adminMetadata.expiry}}}async function decryptWithGCM(encryptedBase64,accessSettings,masterPassword,variant="Vortex"){const strongPassword=await generateStrongPasswordFromAccessSettings(accessSettings,masterPassword);const{salt,iv}=await generatePseudoPad(accessSettings,strongPassword,variant);const keyRaw=await deriveKeyWithArgon2(strongPassword,salt);const key=await crypto.subtle.importKey("raw",keyRaw,{name:"AES-GCM"},false,["decrypt"]);try{const encryptedBytes=Uint8Array.from(atob(encryptedBase64),c=>c.charCodeAt(0));const decrypted=await crypto.subtle.decrypt({name:"AES-GCM",iv:iv},key,encryptedBytes);securelyEraseMemory();return(new TextDecoder).decode(decrypted)}catch(e){securelyEraseMemory();throw new Error("❌ Decryption failed")}}function showCreateTeamModal(){resetTimer();document.getElementById("teamModal").classList.remove("hidden")}function hideCreateTeamModal(){document.getElementById("newTeamName").value="";document.getElementById("teamModal").classList.add("hidden")}async function createTeam(){resetTimer();const name=document.getElementById("newTeamName").value.trim();if(!name)return showModalAlert("teamNameReq");const existingTeamByName=Object.values(vault.teams||{}).find(team=>team.encrypted_team.name.toLowerCase()===name.toLowerCase());if(existingTeamByName){showModalAlert("teamAlreadyExists");return}let id;do{id=generateId()}while(vault.teams&&vault.teams[id]);let accessSettings=generateMemberAccessSettings();let password=generateStrongPasswordFromAccessSettings(accessSettings,name);const salt=crypto.getRandomValues(new Uint8Array(16));const finalSalt=await getFinalSalt(salt,(new TextEncoder).encode(password));const enc=new TextEncoder;const keyMaterial=await crypto.subtle.importKey("raw",enc.encode(password),{name:"PBKDF2"},false,["deriveBits","deriveKey"]);const derivedKey=await crypto.subtle.deriveKey({name:"PBKDF2",salt:finalSalt,iterations:3e5,hash:"SHA-256"},keyMaterial,{name:"AES-GCM",length:256},true,["encrypt","decrypt"]);const exportedKey=await crypto.subtle.exportKey("raw",derivedKey);const derivedKeyBase64=arrayBufferToBase64(exportedKey);vault.teams[id]={encrypted_team:{id:id,name:name,password_derived_key:"",credentials:[]},team_metadata:{created_at:(new Date).toISOString(),checksum:""}};const team=vault.teams[id];team.encrypted_team.password_derived_key=derivedKeyBase64;logAdminAction("team_created",{team_id:id,team_name:name.toLowerCase()});hideCreateTeamModal();updateTeamList();lucide.createIcons()}async function createEncryptedTeamBlock(teamId,teamName,teamCredentials){const teamKey=CryptoJS.lib.WordArray.random(32).toString();const flavour=vault.vault_metadata.flavour||"Vortex";const{salt,iv}=await generatePseudoPad(teamId,teamKey,flavour);const cryptoKey=await deriveAESKey(teamKey,salt);const encryptedTeamBlock=await encryptAESGCM(JSON.stringify({name:teamName,credentials:teamCredentials}),cryptoKey,iv);if(!vault.team_blocks)vault.team_blocks={};vault.team_blocks[teamId]=encryptedTeamBlock;if(!vault.teams)vault.teams={};vault.teams[teamId]={id:teamId,name:teamName,team_key:teamKey}}function updateTeamList(){const list=document.getElementById("teamsList");const search=document.getElementById("teamSearchInput").value.toLowerCase();list.innerHTML="";const sortedTeams=Object.entries(vault.teams||{}).sort(([,a],[,b])=>a.encrypted_team.name.localeCompare(b.encrypted_team.name));sortedTeams.forEach(([id,team])=>{if(!team.encrypted_team.name.toLowerCase().includes(search))return;const div=document.createElement("div");div.className="team-card compact-item input-group";div.innerHTML=`
        <div class="toggles">
          <b>${team.encrypted_team.name}</b>
          <button id="deleteTeamButton-${id}" type="button" class="btn outline-secondary" style="margin-left:3rem; max-width: none; width: auto;"><i data-lucide="x"></i></button>
        </div>
      `;list.appendChild(div)});resetTimer();lucide.createIcons()}function deleteTeam(id){const teamName=vault.teams[id].encrypted_team.name;const message=tWithVars("teamDeleteConfirm",{teamName:teamName});showConfirmation(message,confirmed=>{if(confirmed){logAdminAction("team_deleted",{team_id:id,team_name:vault.teams[id].encrypted_team.name});delete vault.teams[id];Object.values(vault.members||{}).forEach(member=>{if(member.encrypted_vault&&member.encrypted_vault.team_keys&&member.encrypted_vault.team_keys[id]){logAdminAction("team_deleted_from_member",{member_id:member.encrypted_vault.id,team_id:id,team_name:member.encrypted_vault.team_keys[id].label});delete member.encrypted_vault.team_keys[id]}});lucide.createIcons();updateTeamList();updateMembersList();updateAssignmentsUI();updateAssignmentsByTeamUI();updateCredentialsList();updateCredentialsByTeam();showModalAlert(`teamDeleteSuccess`)}})}function showCreateMemberModal(){const modal=document.getElementById("createMemberModal");if(modal)modal.classList.remove("hidden")}function hideCreateMemberModal(){const modal=document.getElementById("createMemberModal");const memberName=document.getElementById("newMemberName");memberName.value="";if(modal)modal.classList.add("hidden")}async function createMember(){const nameInput=document.getElementById("newMemberName");const memberName=nameInput.value.trim();if(!memberName){showModalAlert("memberNameReq");return}const existingMemberByName=Object.values(vault.members||{}).find(member=>member.encrypted_vault.name.toLowerCase()===memberName.toLowerCase());if(existingMemberByName){showModalAlert("memberAlreadyExists");return}let memberId;do{memberId=generateId()}while(vault.members&&vault.members[memberId]);vault.members[memberId]={encrypted_vault:{id:memberId,name:memberName,password_derived_key:"",totp:"",team_keys:{}},vault_metadata:{pending:true,totp_required:"no",created_at:(new Date).toISOString(),expiry:"",salt:"",checksum:""}};const defaultExpiry=new Date;defaultExpiry.setFullYear(defaultExpiry.getFullYear()+1);vault.members[memberId].vault_metadata.expiry=defaultExpiry.toISOString().split("T")[0];logAdminAction("member_created",{member_id:memberId,member_name:memberName,access_expiry:vault.members[memberId].vault_metadata.expiry});resetTimer();hideCreateMemberModal();updateMembersList();showModalAlert(t("memberCreated",{memberName:memberName}));nameInput.value=""}function deleteMember(id){const memberName=vault.members[id].encrypted_vault.name;const message=tWithVars("memberDeleteConfirm",{memberName:memberName});showConfirmation(message,confirmed=>{if(confirmed){const member=vault.members?.[id];if(member&&member.encrypted_vault?.team_keys){Object.keys(member.encrypted_vault.team_keys).forEach(teamId=>{delete member.encrypted_vault.team_keys[teamId]})}logAdminAction("member_deleted",{member_id:id,member_name:memberName});delete vault.members[id];updateMembersList();updateAssignmentsUI();updateAssignmentsByTeamUI();resetTimer();showModalAlert(`memberDeleted`)}})}function cancelFinalize(){const prompt=document.getElementById("passwordPrompt");if(prompt)prompt.remove();finalizeTargetMemberId=null}function generateBase32Secret(byteLength=20){const randomBytes=window.crypto.getRandomValues(new Uint8Array(byteLength));return bytesToBase32(randomBytes)}function bytesToBase32(bytes){const alphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";let bits=0,value=0,output="";for(let i=0;i<bytes.length;i++){value=value<<8|bytes[i];bits+=8;while(bits>=5){output+=alphabet[value>>>bits-5&31];bits-=5}}if(bits>0){output+=alphabet[value<<5-bits&31]}return output}async function submitFinalizePassword(){const password=document.getElementById("finalizePasswordInput").value.trim();if(!password||!finalizeTargetMemberId)return;const member=vault.members[finalizeTargetMemberId];const accessSettings=member.access_qr;const flavour=vault.vault_metadata.flavour||"Vortex";Object.entries(member.team_keys).forEach(([teamId,entry])=>{if(entry.pending){const tempDecrypted=CryptoJS.AES.decrypt(entry.data,VAULT_SYSTEM_KEY).toString(CryptoJS.enc.Utf8);encryptData(tempDecrypted,accessSettings,password,flavour).then(newEncrypted=>{member.team_keys[teamId]={data:newEncrypted,pending:false}})}});member.pending=false;const newTOTP=generateBase32Secret(20);const encryptedTOTP=await encryptData(newTOTP,accessSettings,password,flavour);member.totp=encryptedTOTP;finalizeTargetMemberId=null;document.getElementById("passwordPrompt").classList.add("hidden");document.getElementById("finalizePasswordInput").value="";updateMembersList();updateAssignmentsUI();generateQRCodeForMember(member.name,accessSettings,newTOTP)}function showAssignMemberModal(){const memberSelect=document.getElementById("selectMember");const teamSelect=document.getElementById("selectTeam");memberSelect.innerHTML="";teamSelect.innerHTML="";Object.entries(vault.members||{}).forEach(([id,member])=>{const option=document.createElement("option");option.value=id;option.textContent=member.name;memberSelect.appendChild(option)});Object.entries(vault.teams||{}).forEach(([id,team])=>{const option=document.createElement("option");option.value=id;option.textContent=team.name;teamSelect.appendChild(option)});document.getElementById("assignMemberModal").classList.remove("hidden");resetTimer()}function hideAssignMemberModal(){resetTimer();document.getElementById("assignMemberModal").classList.add("hidden")}function assignMemberToTeam(){const memberId=document.getElementById("selectMember").value;const teamId=document.getElementById("selectTeam").value;if(!memberId||!teamId)return showModalAlert("teamMmemberSelectReq");const member=vault.members[memberId];const team=vault.teams[teamId];if(!member.team_keys)member.team_keys={};if(!member.team_keys[teamId]){member.team_keys[teamId]={data:"",pending:true}}if(!team.credentials)team.credentials=[];hideAssignMemberModal();updateAssignmentsUI();updateMembersList()}function deleteAssignment(memberId,teamId){const member=vault.members?.[memberId];if(!member||!member.team_keys?.[teamId])return;showConfirmation(`Remove ${member.name} from ${vault.teams?.[teamId]?.name||teamId}?`,confirmed=>{if(confirmed){delete member.team_keys[teamId];updateAssignmentsUI();updateMembersList()}})}function updateAssignmentsUI(){const list=document.getElementById("assignmentsList");const search=assignmentFilter.toLowerCase();list.innerHTML="";let hasAssignments=false;Object.entries(vault.members||{}).forEach(([memberId,member])=>{const encryptedMap=member.encrypted_vault.team_keys||{};const assignedTeamIds=Object.keys(encryptedMap);if(!assignedTeamIds.length)return;if(search&&!member.encrypted_vault.name.toLowerCase().includes(search))return;const div=document.createElement("div");div.className="member-card";let teamListHtml=assignedTeamIds.map(tid=>{const teamName=vault.teams[tid]?.encrypted_team.name||"(Unknown)";return`
        <span class="team-chip">
          ${teamName}
          <button id="removeMember-${memberId}-${tid}" class="icon-button" type="button">
            <i data-lucide="square-arrow-out-up-right" style="color: #1E003B;"></i>
          </button>
        </span>
      `}).join(" ");div.innerHTML=`
      <b>${member.encrypted_vault.name}</b><br>
      ${teamListHtml}
    `;list.appendChild(div);hasAssignments=true});if(!hasAssignments){list.innerHTML=`<em>${t("noAssignments")}</em>`}resetTimer();lucide.createIcons()}function updateAssignmentsByTeamUI(){const list=document.getElementById("assignmentsList");const search=assignmentFilter.toLowerCase();list.innerHTML="";let hasAssignments=false;Object.entries(vault.members||{}).forEach(([memberId,member])=>{const encryptedMap=member.encrypted_vault.team_keys||{};const assignedTeamIds=Object.keys(encryptedMap);if(!assignedTeamIds.length)return;const matchingTeams=assignedTeamIds.filter(tid=>{const teamName=vault.teams[tid]?.encrypted_team.name.toLowerCase()||"";return teamName.includes(search)});if(!matchingTeams.length)return;const div=document.createElement("div");div.className="member-card";let teamListHtml=matchingTeams.map(tid=>{const teamName=vault.teams[tid]?.encrypted_team.name||"(Unknown)";return`
        <span class="team-chip">
          ${teamName}
          <button id="removeMember-${memberId}-${tid}" class="icon-button" type="button">
            <i data-lucide="square-arrow-out-up-right" style="color: #1E003B;"></i>
          </button>
        </span>
      `}).join(" ");div.innerHTML=`
      <b>${member.encrypted_vault.name}</b><br>
      ${teamListHtml}
    `;list.appendChild(div);hasAssignments=true});if(!hasAssignments){list.innerHTML=`<em>${t("noMatchingAssignment")}</em>`}resetTimer();lucide.createIcons()}function removeMemberFromTeam(memberId,teamId){const member=vault.members[memberId];if(!member)return;const memberName=member.encrypted_vault.name;const teamName=vault.teams[teamId].encrypted_team.name;const message=tWithVars("removeMemberFromTeam",{member:memberName,teamName:teamName});showConfirmation(message,confirmed=>{if(confirmed){delete member.encrypted_vault.team_keys[teamId];logAdminAction("team_removed_from_member",{member_id:memberId,team_id:teamId});resetTimer();updateAssignmentsUI();updateAllUI()}})}function showAddCredentialModal(){const modal=document.getElementById("credentialModal");const select=document.getElementById("credentialTeam");select.innerHTML=Object.values(vault.teams||{}).map(t=>`<option value="${t.encrypted_team.id}">${t.encrypted_team.name}</option>`).join("");modal.classList.remove("hidden");modal.classList.add("active");resetTimer()}function hideCredentialModal(){resetTimer();const modal=document.getElementById("credentialModal");modal.classList.remove("active");modal.classList.add("hidden");["credentialLabel","credentialURL","credentialUsername","credentialPassword","credentialNotes"].forEach(id=>document.getElementById(id).value="")}function addCredential(){const teamId=document.getElementById("credentialTeam").value;const label=document.getElementById("credentialLabel").value.trim();const url=document.getElementById("credentialURL").value.trim();const username=document.getElementById("credentialUsername").value.trim();const password=document.getElementById("credentialPassword").value.trim();const notes=document.getElementById("credentialNotes").value;if(!teamId||!label)return showModalAlert("teamNameReq");const cred={label:label,url:url,username:username,password:password,notes:notes};vault.teams[teamId].encrypted_team.credentials=vault.teams[teamId].encrypted_team.credentials||[];vault.teams[teamId].encrypted_team.credentials.push(cred);logAdminAction("credential_added_to_team",{team_id:teamId,credential_label:label});resetTimer();hideCredentialModal();updateCredentialsList()}function deleteCredential(teamId,index){resetTimer();const team=vault.teams[teamId];const cred=team.encrypted_team.credentials[index].label;if(!team||!team.encrypted_team.credentials||!team.encrypted_team.credentials[index])return;const message=tWithVars("credentialDeleteConfirm",{cred:cred});showConfirmation(message,confirmed=>{if(confirmed){logAdminAction("credential_deleted_from_team",{team_id:teamId,credential_label:team.encrypted_team.credentials[index].label});team.encrypted_team.credentials.splice(index,1);updateCredentialsList()}})}let adminConfig=null;async function checkVaultExistence(){try{const response=await fetch("/vault/team-vault.json",{method:"GET",credentials:"same-origin"});if(response.ok){showScreen("adminVaultEditorPanel");resetTimer()}else{throw new Error("Vault missing")}}catch(e){showScreen("uploadAdminConfigScreen")}}function handleAdminConfigUpload(event){const file=event.target.files[0];const inputField=document.getElementById("adminFileInputText");inputField.value="";if(!file)return;const reader=new FileReader;reader.onload=function(evt){try{adminConfig=JSON.parse(evt.target.result);if(!adminConfig.access_flavour||!adminConfig.totp_encrypted_secret){throw new Error("Invalid Admin Config format")}showModalAlert("adminConfigLoaded");showScreen("adminUnlockPanel")}catch(err){console.error(err);showModalAlert("adminConfigLoadFailed")}};reader.readAsText(file);resetTimer()}function logoutAdmin(){vault={};adminConfig=null;securelyEraseMemory();const fieldsToClear=["adminAccessInput","adminPasswordInput","adminTOTPInput","adminPasswordEditorInput","adminEditorTOTPInput","adminFileInputText"];fieldsToClear.forEach(id=>{const el=document.getElementById(id);if(el)el.value=""});const elementsToClear=["teamsList","membersList","credentialsList","assignmentsList","vaultExportFeedback","vaultExpirationDisplay"];elementsToClear.forEach(id=>{const el=document.getElementById(id);if(el)el.innerHTML=""});const searchInputs=["teamSearchInput","memberSearchInput","credentialSearchInput","credentialSearchByTeam","assignmentSearchInput","assignmentSearchByTeam"];searchInputs.forEach(id=>{const el=document.getElementById(id);if(el)el.value=""});const qrOutput=document.getElementById("qrOutput");if(qrOutput)qrOutput.innerHTML="";const expirySortBtn=document.getElementById("toggleExpirySort");if(expirySortBtn)expirySortBtn.setAttribute("data-active","false");showScreen("memberUnlockPanel")}let teamPage=1;let memberPage=1;let assignmentPage=1;let credentialPage=1;let teamFilter="";let memberFilter="";let assignmentFilter="";let credentialFilter="";function normalizeAllExpiryDates(members){for(const[id,member]of Object.entries(members||{})){let raw=member.vault_metadata.expiry;if(!raw){member.vault_metadata.expiry=(new Date).toISOString().split("T")[0];continue}if(raw instanceof Date&&!isNaN(raw.getTime())){const yyyy=raw.getFullYear();const mm=String(raw.getMonth()+1).padStart(2,"0");const dd=String(raw.getDate()).padStart(2,"0");member.vault_metadata.expiry=`${yyyy}-${mm}-${dd}`;continue}const parsed=new Date(raw);if(!isNaN(parsed.getTime())){const yyyy=parsed.getFullYear();const mm=String(parsed.getMonth()+1).padStart(2,"0");const dd=String(parsed.getDate()).padStart(2,"0");member.vault_metadata.expiry=`${yyyy}-${mm}-${dd}`}else{member.vault_metadata.expiry=(new Date).toISOString().split("T")[0]}}}function updateMembersListSortedByExpiry(){const list=document.getElementById("membersList");const search=memberFilter.toLowerCase();list.innerHTML="";const now=new Date;const sortedMembers=Object.entries(vault.members||{}).sort(([,a],[,b])=>{return new Date(a.vault_metadata.expiry)-new Date(b.vault_metadata.expiry)});let hasMembers=false;sortedMembers.forEach(([id,member])=>{if(!member.encrypted_vault.name.toLowerCase().includes(search))return;const expiryDate=new Date(member.vault_metadata.expiry);const diffDays=Math.floor((expiryDate-now)/(1e3*60*60*24));let glowColor="";if(diffDays<0)glowColor="border: 2px solid #dc3545; background: #f8d7da;";else if(diffDays<=30)glowColor="border: 2px solid #ffc107; background: #fff3cd;";else glowColor="border: 2px solid #198754; background: #d1e7dd;";const div=document.createElement("div");div.className="member-card compact-item";let assignButton="";if(!member.vault_metadata.pending){assignButton=`<button id="assignmentButton-${id}" type="button" class="btn outline" style="margin-left:auto;"><i data-lucide="share-2"></i><span data-i18n="assignButton"> Assign</span></button>`}const totpChecked=member.vault_metadata.totp_required==="yes"?"checked":"";const expiryValue=member.vault_metadata.expiry;div.innerHTML=`
      <b>${member.encrypted_vault.name}</b> 
      ${member.vault_metadata.pending?'<span class="pending" style="color: #842029;" data-i18n="pending">(Pending)</span>':""}
      <div class="input-group" style="margin-left:1rem; margin-top:0.5rem;">
      <div class="toggles">
        <div class="toggle-container">
        ${member.vault_metadata.pending?`<button id="finaliseMemberButton-${id}" type="button" class="btn primary" style="margin-left:auto;"><i data-lucide="shield-check"></i><span data-i18n="finalizeButton"> Finalize</span></button>`:""}
        ${assignButton}
        </div>
        <div class="toggle-container">
        <button id="deleteMemberFromList-${id}" type="button" class="btn outline-secondary" style="margin-left:auto;"><i data-lucide="user-x"></i></button>
        </div>
      </div>
      </div>
        <div class="toggles" style="margin-left:1rem; margin-top:0.5rem;">
          <div class="toggle-container">
            <label for="totptoggle-${id}" data-i18n="secondFactor">Second Factor</label>
            <input id="totptoggle-${id}" type="checkbox" class="toggle" ${totpChecked}>
          </div>
          <div class="toggle-container">
            <label for="dateChangeInput-${id}" style="margin-left:1rem;" data-i18n="accessExpiry">Access Expiry</label>
            <input id="dateChangeInput-${id}" type="date" value="${expiryValue}" style="max-width: none; width: auto; ${glowColor}">
          </div>
        </div>
    `;list.appendChild(div);hasMembers=true;translateDynamicElement(div)});if(!hasMembers){list.innerHTML=`<em>${t("noMembers")}</em>`}resetTimer();lucide.createIcons()}function updateMembersList(){const list=document.getElementById("membersList");const search=memberFilter.toLowerCase();list.innerHTML="";let hasMembers=false;const sortedMembers=Object.entries(vault.members||{}).sort(([,a],[,b])=>a.encrypted_vault.name.localeCompare(b.encrypted_vault.name));sortedMembers.forEach(([id,member])=>{if(!member.encrypted_vault.name.toLowerCase().includes(search))return;const totpChecked=member.vault_metadata.totp_required==="yes"?"checked":"";const expiryValue=member.vault_metadata.expiry;const div=document.createElement("div");div.className="member-card compact-item";let assignButton="";if(!member.vault_metadata.pending){assignButton=`<button id="assignmentButton-${id}" type="button" class="btn outline" style="margin-left:auto;"><i data-lucide="share-2"></i><span data-i18n="assignButton"> Assign</span></button>`}div.innerHTML=`
      <b>${member.encrypted_vault.name}</b> 
      ${member.vault_metadata.pending?'<span class="pending" style="color: #842029;" data-i18n="pending">(Pending)</span>':""}
      <div class="input-group" style="margin-left:1rem; margin-top:0.5rem;">
      <div class="toggles">
        <div class="toggle-container">
        ${member.vault_metadata.pending?`<button id="finaliseMemberButton-${id}" type="button" class="btn primary" style="margin-left:auto;"><i data-lucide="shield-check"></i><span data-i18n="finalizeButton"> Finalize</span></button>`:""}
        ${assignButton}
        </div>
        <div class="toggle-container">
        <button id="deleteMemberFromList-${id}" type="button" class="btn outline-secondary" style="margin-left:auto;"><i data-lucide="user-x"></i></button>
        </div>
      </div>
      </div>
        <div class="toggles" style="margin-left:1rem; margin-top:0.5rem;">
          <div class="toggle-container">
            <label for="totptoggle-${id}" data-i18n="secondFactor">Second Factor</label>
            <input id="totptoggle-${id}" type="checkbox" class="toggle" ${totpChecked}>
          </div>
          <div class="toggle-container">
            <label for="dateChangeInput-${id}" style="margin-left:1rem;" data-i18n="accessExpiry">Access Expiry</label>
            <input id="dateChangeInput-${id}" type="date" value="${expiryValue}" style="max-width: none; width: auto;">
          </div>
        </div>
    `;list.appendChild(div);hasMembers=true;translateDynamicElement(div)});if(!hasMembers){list.innerHTML=`<em>${t("noMembers")}</em>`}resetTimer();lucide.createIcons()}function toggleTOTPRequirement(memberId,isChecked){resetTimer();if(vault.members[memberId]){vault.members[memberId].vault_metadata.totp_required=isChecked?"yes":"no";logAdminAction("member_totp_requirement_changed",{member_id:vault.members[memberId].encrypted_vault.id,new_totp_requirement:vault.members[memberId].vault_metadata.totp_required})}}function updateMemberExpiry(memberId,newDate){resetTimer();if(vault.members[memberId]){vault.members[memberId].vault_metadata.expiry=newDate;logAdminAction("member_access_expiry_changed",{member_id:memberId,new_expiry_date:newDate})}}function onSearchMembers(){memberFilter=document.getElementById("memberSearchInput").value.trim();memberPage=1;resetTimer();updateMembersList()}function updateTeamsList(){const list=document.getElementById("teamsList");const search=teamFilter.toLowerCase();list.innerHTML="";let hasTeams=false;Object.entries(vault.teams||{}).forEach(([id,team])=>{if(!team.name.toLowerCase().includes(search))return;const div=document.createElement("div");div.className="team-card compact-item";div.innerHTML=`
      <b>${team.name}</b>
      <button onclick="deleteTeam('${id}')"><i data-lucide="trash-2"></i></button>
    `;list.appendChild(div);hasTeams=true});if(!hasTeams){list.innerHTML=`<em>No teams to display.</em>`}resetTimer();lucide.createIcons()}function onSearchTeams(){resetTimer();teamFilter=document.getElementById("teamSearchInput").value.trim();teamPage=1;resetTimer();updateTeamList()}function onSearchAssignments(){assignmentFilter=document.getElementById("assignmentSearchInput").value.trim();assignmentPage=1;resetTimer();updateAssignmentsUI()}function onSearchAssignmentsByTeamUI(){assignmentFilter=document.getElementById("assignmentSearchByTeam").value.trim();assignmentPage=1;resetTimer();updateAssignmentsByTeamUI()}function updateCredentialsList(){const list=document.getElementById("credentialsList");const search=credentialFilter.toLowerCase();list.innerHTML="";const allCredentials=[];Object.entries(vault.teams||{}).forEach(([teamId,team])=>{(team.encrypted_team.credentials||[]).forEach((cred,index)=>{allCredentials.push({id:`${teamId}:${index}`,teamId:teamId,index:index,...cred})})});const filtered=allCredentials.filter(c=>(c.label||"").toLowerCase().includes(search)||(c.url||"").toLowerCase().includes(search));filtered.forEach(cred=>{const div=document.createElement("div");div.className="credential-card scroll-item";div.innerHTML=`
    <div class="input-group">
      <div class="toggles">
        <div>
          <b>${cred.label}</b><br>
          <small>${t("urlLabel")}: ${cred.url||t("noneValue")}</small><br>
          ${t("teamLabel")}: ${vault.teams[cred.teamId]?.encrypted_team.name||cred.teamId}<br>
        </div>
        <div class="input-group" style="margin-left: auto;">
          <button type="button" class="btn outline-gold edit-credential-btn" data-team-id="${cred.teamId}" data-index="${cred.index}">
            <i data-lucide="file-pen-line"></i>
          </button>
          <button type="button" class="btn outline-secondary delete-credential-btn" data-team-id="${cred.teamId}" data-index="${cred.index}" style="margin-left: 2rem;">
            <i data-lucide="x"></i>
          </button>
        </div>
      </div>
    </div>
  `;list.appendChild(div)});resetTimer();lucide.createIcons()}function updateCredentialsByTeam(){const list=document.getElementById("credentialsList");const search=credentialFilter.toLowerCase();list.innerHTML="";const allCredentials=[];Object.entries(vault.teams||{}).forEach(([teamId,team])=>{(team.encrypted_team.credentials||[]).forEach((cred,index)=>{allCredentials.push({id:`${teamId}:${index}`,teamId:teamId,index:index,...cred})})});const filtered=allCredentials.filter(c=>(vault.teams[c.teamId]?.encrypted_team.name||"").toLowerCase().includes(search));filtered.forEach(cred=>{const div=document.createElement("div");div.className="credential-card scroll-item";div.innerHTML=`
      <div class="input-group">
        <div class="toggles">
          <div>
            <b>${cred.label}</b><br>
            <small>${t("urlLabel")}: ${cred.url||t("noneValue")}</small><br>
            ${t("teamLabel")}: ${vault.teams[cred.teamId]?.encrypted_team.name||cred.teamId}<br>
          </div>
          <div class="input-group" style="margin-left: auto;">
            <button type="button" class="btn outline-gold edit-credential-btn" data-team-id="${cred.teamId}" data-index="${cred.index}">
              <i data-lucide="file-pen-line"></i>
            </button>
            <button type="button" class="btn outline-secondary delete-credential-btn" data-team-id="${cred.teamId}" data-index="${cred.index}" style="margin-left: 2rem;">
              <i data-lucide="x"></i>
            </button>
          </div>
        </div>
      </div>
    `;list.appendChild(div)});if(filtered.length===0){list.innerHTML=`<em>${t("noCredFound")}</em>`}resetTimer();lucide.createIcons()}function onSearchCredentials(){credentialFilter=document.getElementById("credentialSearchInput").value.trim();credentialPage=1;resetTimer();updateCredentialsList()}function onSearchCredentialsByTeam(){credentialFilter=document.getElementById("credentialSearchByTeam").value.trim();credentialPage=1;resetTimer();updateCredentialsByTeam()}let _editingCredential=null;function editCredential(teamId,index){const cred=vault.teams[teamId].encrypted_team.credentials[index];if(!cred)return;_editingCredential={teamId:teamId,index:index};document.getElementById("editCredentialLabel").value=cred.label;document.getElementById("editCredentialURL").value=cred.url;document.getElementById("editCredentialUsername").value=cred.username;document.getElementById("editCredentialPassword").value=cred.password;document.getElementById("editCredentialNotes").value=cred.notes;document.getElementById("editCredentialModal").classList.remove("hidden");resetTimer()}function saveCredentialEdit(){const{teamId,index}=_editingCredential;const cred=vault.teams[teamId].encrypted_team.credentials[index];cred.label=document.getElementById("editCredentialLabel").value.trim();cred.url=document.getElementById("editCredentialURL").value.trim();cred.username=document.getElementById("editCredentialUsername").value.trim();cred.password=document.getElementById("editCredentialPassword").value.trim();cred.notes=document.getElementById("editCredentialNotes").value.trim();resetTimer();closeEditCredentialModal();updateCredentialsList()}function closeEditCredentialModal(){document.getElementById("editCredentialModal").classList.add("hidden");_editingCredential=null}function saveEditedCredential(){const{teamId,index}=window._editingCredential||{};if(!teamId||index===undefined)return;const team=vault.teams[teamId];if(!team||!team.credentials||!team.credentials[index])return;team.credentials[index]={label:document.getElementById("editCredentialLabel").value.trim(),url:document.getElementById("editCredentialURL").value.trim(),username:document.getElementById("editCredentialUsername").value.trim(),password:document.getElementById("editCredentialPassword").value.trim()};document.getElementById("editCredentialModal").classList.add("hidden");resetTimer();updateCredentialsList()}function showEditCredentialModal(teamId,index){const team=vault.teams?.[teamId];if(!team||!team.encrypted_team.credentials||!team.encrypted_team.credentials[index]){return showModalAlert("teamNotFound")}const cred=team.encrypted_team.credentials[index];document.getElementById("editCredentialLabel").value=cred.label||"";document.getElementById("editCredentialURL").value=cred.url||"";document.getElementById("editCredentialUsername").value=cred.username||"";document.getElementById("editCredentialPassword").value=cred.password||"";document.getElementById("editCredentialNotes").value=cred.notes||"";const saveBtn=document.getElementById("saveEditCredential");const cancelBtn=document.getElementById("cancelEditCredential");saveBtn.onclick=()=>saveCredentialChanges(teamId,index);cancelBtn.onclick=hideEditCredentialModal;document.getElementById("editCredentialModal").classList.remove("hidden");resetTimer()}function saveCredentialChanges(teamId,index){const name=document.getElementById("editCredentialLabel").value.trim();const username=document.getElementById("editCredentialUsername").value.trim();const password=document.getElementById("editCredentialPassword").value.trim();const url=document.getElementById("editCredentialURL").value.trim();const notes=document.getElementById("editCredentialNotes").value.trim();if(!name||!username||!password){showModalAlert("credFieldsReq");return}const team=vault.teams[teamId];if(!team||!team.encrypted_team.credentials||!team.encrypted_team.credentials[index]){return showModalAlert("credNotFound")}const cred=team.encrypted_team.credentials[index];cred.label=name;cred.username=username;cred.password=password;cred.url=url;cred.notes=notes;logAdminAction("credential_edited_in_team",{team_id:teamId,credential_label:cred.label});resetTimer();hideEditCredentialModal();updateCredentialsList()}function hideEditCredentialModal(){document.getElementById("editCredentialModal").classList.add("hidden");document.getElementById("editCredentialLabel").value="";document.getElementById("editCredentialUsername").value="";document.getElementById("editCredentialPassword").value="";document.getElementById("editCredentialURL").value="";document.getElementById("editCredentialNotes").value="";resetTimer()}function generateQRCodeForMember(memberName,accessSettings,totpSecret){const qrPlace=document.getElementById("hiddenQr");qrPlace.style.display="block";const qrOutput=document.getElementById("qrOutput");qrOutput.innerHTML=`<h3>${memberName}'s QR Code</h3>`;const label=encodeURIComponent(`${accessSettings}`);const issuer=encodeURIComponent("CarryPass Team");const otpUrl=`otpauth://totp/${issuer}:${label}?secret=${totpSecret}&issuer=${issuer}`;const tempContainer=document.createElement("div");tempContainer.style.display="none";document.body.appendChild(tempContainer);const qr=new QRCode(tempContainer,{text:otpUrl,width:220,height:220,correctLevel:QRCode.CorrectLevel.M});setTimeout(()=>{const img=tempContainer.querySelector("img");if(!img){console.error("❌ QR code image not rendered.");document.body.removeChild(tempContainer);return}const qrCanvas=document.createElement("canvas");const qrImg=new Image;qrImg.src=img.src;qrImg.onload=()=>{const border=16;const size=qrImg.width+border*2;qrCanvas.width=size;qrCanvas.height=size;const ctx=qrCanvas.getContext("2d");ctx.fillStyle="#ffffff";ctx.fillRect(0,0,size,size);ctx.drawImage(qrImg,border,border);qrOutput.appendChild(qrCanvas);document.body.removeChild(tempContainer)}},200)}function startFinalizeEncryption(memberId){finalizeTargetMemberId=memberId;document.getElementById("finalizePasswordInput").value="";document.getElementById("passwordPrompt").classList.remove("hidden")}function cancelFinalize(){finalizeTargetMemberId=null;document.getElementById("passwordPrompt").classList.add("hidden");document.getElementById("finalizePasswordInput").value=""}function scrollSectionIntoView(sectionId){const section=document.getElementById(sectionId);if(section){section.scrollIntoView({behavior:"smooth",block:"start"})}}function showConfirmation(message,onConfirm){const modal=document.getElementById("confirmationModal");const messageEl=document.getElementById("confirmationMessage");const yesBtn=document.getElementById("confirmYesBtn");const noBtn=document.getElementById("confirmNoBtn");messageEl.textContent=message;const cleanup=()=>{modal.classList.add("hidden");yesBtn.onclick=null;noBtn.onclick=null};yesBtn.onclick=()=>{cleanup();onConfirm(true)};noBtn.onclick=()=>{cleanup();onConfirm(false)};modal.classList.remove("hidden")}function showModalAlert(messageKey,onClose){const lang=localStorage.getItem("preferredLanguage")||"en";const modal=document.getElementById("alertModal");const messageEl=document.getElementById("alertMessage");const okBtn=document.getElementById("alertOkBtn");const translated=translations[lang]?.[messageKey]||messageKey;messageEl.textContent=translated;const cleanup=()=>{modal.classList.add("hidden");modal.classList.remove("active");okBtn.onclick=null;if(onClose)onClose()};okBtn.onclick=cleanup;modal.classList.remove("hidden");modal.classList.add("active");modal.style.zIndex="9999"}function generateMemberAccessSettings(){let firstThree="";while(true){firstThree=Array.from({length:3},()=>Math.random()<.5?"C":"X").join("");if(firstThree.includes("C"))break}const fourth=Math.random()<.5?"C":"X";const allowedLetters="ABDEFGHIJKLMNOPQRSTUVWYZ";const letterLength=Math.floor(Math.random()*4)+4;const randomLetters=Array.from({length:letterLength},()=>allowedLetters.charAt(Math.floor(Math.random()*allowedLetters.length))).join("");const lengthNumber=Math.floor(Math.random()*21)+40;const iterationNumber=Math.floor(Math.random()*899)+101;return`${firstThree}${fourth}${randomLetters}${lengthNumber}${iterationNumber}`}function securelyEraseMemory(){try{if(typeof derivedKey!=="undefined")derivedKey=null;if(typeof derivedIV!=="undefined")derivedIV=null;if(typeof derivedSalt!=="undefined")derivedSalt=null;if(typeof pseudoPad!=="undefined")pseudoPad=null}catch(e){}}async function getFinalSalt(adminSalt,password){const PASSWORDCHARSETS={upperAlpha:"ZJVEQSLBWRGNMYXDOCHIPATUKF",lowerAlpha:"pvjaqukxhyngorfizwmtlbdecs",numbers:"72940538615784216903",special:"!@#&$%*^()_+[]{}|;:,.<>?/"};const charsetConcat=PASSWORDCHARSETS.upperAlpha+PASSWORDCHARSETS.lowerAlpha+PASSWORDCHARSETS.numbers+PASSWORDCHARSETS.special;const saltForArgon=(new TextEncoder).encode(charsetConcat);const argonHash=await argon2.hash({pass:password,salt:saltForArgon,mem:131072,time:2,hashLen:16,type:argon2.ArgonType.Argon2id,raw:true});const enhancer=new Uint8Array(argonHash.hash);const saltArray=new Uint8Array(adminSalt);const finalSalt=new Uint8Array(saltArray.length+enhancer.length);finalSalt.set(saltArray,0);finalSalt.set(enhancer,saltArray.length);return finalSalt}function ensureUint8Array(data){return data instanceof Uint8Array?data:new Uint8Array(data)}async function generateArgonNonceEnhancer(secretString,label=""){const hashResult=await argon2.hash({pass:secretString,salt:(new TextEncoder).encode("argon-enhancer::"+label),mem:131072,time:2,hashLen:32,type:argon2.ArgonType.Argon2id,raw:true});return new Uint8Array(hashResult.hash)}function stableStringify(obj){return JSON.stringify(obj,Object.keys(obj).sort())}async function generateChecksum(input,secret="default-shared-secret"){const enc=new TextEncoder;const key=await crypto.subtle.importKey("raw",enc.encode(secret),{name:"HMAC",hash:"SHA-256"},false,["sign"]);const signature=await crypto.subtle.sign("HMAC",key,enc.encode(input));return btoa(String.fromCharCode(...new Uint8Array(signature)))}async function handleCompleteVaultExport(){const adminPassword=document.getElementById("adminExportPassword").value.trim();const expiry=document.getElementById("vaultExpiry").value;if(!adminPassword){showModalAlert("adminPwdRequired");return}if(!isPasswordStrongEnough(adminPassword)){showModalAlert("lowEntropy");return}const adminSalt=crypto.getRandomValues(new Uint8Array(16));const adminNonce=crypto.getRandomValues(new Uint8Array(12));const enc=new TextEncoder;const finalSalt=await getFinalSalt(adminSalt,adminPassword);const keyMaterial=await crypto.subtle.importKey("raw",enc.encode(adminPassword),{name:"PBKDF2"},false,["deriveBits"]);const adminKeyRaw=await crypto.subtle.deriveBits({name:"PBKDF2",salt:finalSalt,iterations:3e5,hash:"SHA-256"},keyMaterial,256);const adminKey=await crypto.subtle.importKey("raw",adminKeyRaw,{name:"AES-GCM"},false,["encrypt","decrypt"]);const adminPayload={teams:vault.teams,members:vault.members};const adminJson=JSON.stringify(adminPayload);const adminEncryptedBuffer=await crypto.subtle.encrypt({name:"AES-GCM",iv:adminNonce},adminKey,enc.encode(adminJson));const adminEncryptedBase64=arrayBufferToBase64(adminEncryptedBuffer);const adminSaltBase64=arrayBufferToBase64(adminSalt);const adminNonceBase64=arrayBufferToBase64(adminNonce);const adminChecksum=await generateChecksum(adminEncryptedBase64+adminSaltBase64+adminNonceBase64);const members={};for(const[memberId,member]of Object.entries(vault.members)){if(!member.encrypted_vault.password_derived_key){console.error(`❗ Missing derived key for member ${memberId}`);continue}const memberNonce=crypto.getRandomValues(new Uint8Array(12));const memberKeyRaw=base64ToArrayBuffer(member.encrypted_vault.password_derived_key);const memberKey=await crypto.subtle.importKey("raw",memberKeyRaw,{name:"AES-GCM"},false,["encrypt"]);const memberEncryptedBuffer=await crypto.subtle.encrypt({name:"AES-GCM",iv:memberNonce},memberKey,enc.encode(JSON.stringify(member.encrypted_vault)));const data=arrayBufferToBase64(memberEncryptedBuffer);const nonce=arrayBufferToBase64(memberNonce);const cleanMetadata={...member.vault_metadata};delete cleanMetadata.checksum;const metadataString=stableStringify(cleanMetadata);const checksum=await generateChecksum(data+nonce+metadataString);member.vault_metadata.checksum=checksum;members[memberId]={data:data,nonce:nonce,metadata:member.vault_metadata}}const teams={};for(const[teamId,team]of Object.entries(vault.teams)){if(!team.encrypted_team.password_derived_key){console.error(`❗ Missing derived key for team ${teamId}`);continue}const teamNonce=crypto.getRandomValues(new Uint8Array(12));const teamKeyRaw=base64ToArrayBuffer(team.encrypted_team.password_derived_key);const teamKey=await crypto.subtle.importKey("raw",teamKeyRaw,{name:"AES-GCM"},false,["encrypt"]);const teamEncryptedBuffer=await crypto.subtle.encrypt({name:"AES-GCM",iv:teamNonce},teamKey,enc.encode(JSON.stringify(team.encrypted_team)));const data=arrayBufferToBase64(teamEncryptedBuffer);const nonce=arrayBufferToBase64(teamNonce);const cleanMetadata={...team.team_metadata};delete cleanMetadata.checksum;const metadataString=stableStringify(cleanMetadata);const checksum=await generateChecksum(data+nonce+metadataString);team.team_metadata.checksum=checksum;teams[teamId]={data:data,nonce:nonce,metadata:team.team_metadata}}const vaultFile={admin_vault_metadata:{created_at:(new Date).toISOString(),expiry:expiry||"",nonce:adminNonceBase64,salt:adminSaltBase64,checksum:adminChecksum},admin:adminEncryptedBase64,members:members,teams:teams};const blob=new Blob([JSON.stringify(vaultFile,null,2)],{type:"application/json"});const url=URL.createObjectURL(blob);const link=document.createElement("a");link.href=url;link.download="team-vault.json";link.click();document.getElementById("adminExportPassword").value="";resetTimer();showModalAlert("vaultExportSuccess")}function handleVaultFileUpload(event,mode){const file=event.target.files[0];if(!file)return;const reader=new FileReader;reader.onload=async function(evt){try{const vaultJson=JSON.parse(evt.target.result);event.target.value="";if(mode==="admin"){document.getElementById("adminEditFileInputText").value="";await handleCompleteAdminVaultImportFromFile(vaultJson);vaultJson=null}else if(mode==="member"){document.getElementById("memberGappedFileInputText").value="";await handleMemberVaultImportFromFile(vaultJson);vaultJson=null}else{throw new Error("Unknown import mode.")}}catch(err){document.getElementById("memberGappedFileInputText").value="";document.getElementById("adminEditFileInputText").value="";console.error("❌ Failed to load vault file:",err);showModalAlert("vaultImportFailed")}};reader.readAsText(file)}async function handleCompleteAdminVaultImportFromFile(vaultJson){try{if(isViewerRateLimited()){showModalAlert("rateLimitExceeded");return}recordViewerAttempt();const adminPassword=document.getElementById("adminPasswordEditorInput").value;if(!adminPassword){showModalAlert("adminPasswordNeeded");return}const adminTOTP=document.getElementById("adminEditorTOTPInput").value;const isTOTPValid=validateTOTPCode(adminTOTP);if(!isTOTPValid){document.getElementById("adminEditorTOTPInput").value="";document.getElementById("adminEditorTOTPInput").focus();showModalAlert("invalidTOTP");return}const{admin_vault_metadata,admin}=vaultJson;const{nonce,salt,expiry,checksum}=admin_vault_metadata;const computedChecksum=await generateChecksum(admin+salt+nonce);if(computedChecksum!==checksum){const proceed=await confirmModal("checksumMismatchPrompt");if(!proceed)return}if(expiry&&new Date>new Date(expiry)){const proceed=await confirmModal("adminVaultExpired");if(!proceed)return}await new Promise(resolve=>setTimeout(resolve,50));const enc=new TextEncoder;const keyMaterial=await crypto.subtle.importKey("raw",enc.encode(adminPassword),{name:"PBKDF2"},false,["deriveBits"]);const adminSalt=base64ToArrayBuffer(salt);const finalSalt=await getFinalSalt(adminSalt,adminPassword);const adminKeyRaw=await crypto.subtle.deriveBits({name:"PBKDF2",salt:finalSalt,iterations:3e5,hash:"SHA-256"},keyMaterial,256);const adminKey=await crypto.subtle.importKey("raw",adminKeyRaw,{name:"AES-GCM"},false,["decrypt"]);let decryptedBuffer;try{const iv=base64ToArrayBuffer(nonce);decryptedBuffer=await crypto.subtle.decrypt({name:"AES-GCM",iv:iv},adminKey,base64ToArrayBuffer(admin))}catch(decryptErr){console.error("❌ Vault decryption failed:",decryptErr);showModalAlert("vaultDecryptionFailed");return}const decryptedJson=(new TextDecoder).decode(decryptedBuffer);const{members,teams,adminUsername}=JSON.parse(decryptedJson);normalizeAllExpiryDates(members);vault.members=members;vault.teams=teams;vault.adminUsername=adminUsername;vault.adminMetadata=admin_vault_metadata;if(admin_vault_metadata?.expiry){const expiryField=document.getElementById("vaultExpirationDisplay");if(expiryField){expiryField.innerText=admin_vault_metadata.expiry}}document.getElementById("adminPasswordEditorInput").value="";document.getElementById("adminEditorTOTPInput").value="";resetTimer();updateAllUI();showScreen("adminPanel")}catch(err){document.getElementById("adminPasswordEditorInput").value="";document.getElementById("adminEditorTOTPInput").value="";console.error("❌ Unexpected error during vault import:",err);showModalAlert("vaultImportError")}}async function handleMemberVaultImportFromFile(vaultJson){try{if(isViewerRateLimited()){showModalAlert("rateLimitExceeded");return}recordViewerAttempt();const memberId=window.sessionMemberId;const memberPassword=document.getElementById("memberPassword").value;const memberBlock=vaultJson.members?.[memberId];if(!memberBlock){showModalAlert("memberNotFound");return}const requiresTOTP=memberBlock.metadata?.totp_required==="yes";let userTOTP="";if(requiresTOTP){const{passPromise,showError,close}=openCarryPasscodeModal("enterCode");try{const code=await passPromise;if(!validateTOTPCode(code)){showError("invalidTotpError");return}userTOTP=code;close()}catch(err){return}}const{data,nonce,metadata}=memberBlock;if(metadata?.expiry&&new Date>new Date(metadata.expiry)){showModalAlert("memberVaultExpired");return}const cleanMeta={...metadata};delete cleanMeta.checksum;const memberChecksum=await generateChecksum(data+nonce+stableStringify(cleanMeta));if(memberChecksum!==metadata.checksum){showModalAlert("memberChecksumMismatch");return}const baseSalt=base64ToArrayBuffer(metadata.salt);const finalSalt=await getFinalSalt(baseSalt,memberPassword);let decryptedVault;try{const enc=new TextEncoder;const keyMaterial=await crypto.subtle.importKey("raw",enc.encode(memberPassword),{name:"PBKDF2"},false,["deriveBits"]);const memberKeyRaw=await crypto.subtle.deriveBits({name:"PBKDF2",salt:finalSalt,iterations:3e5,hash:"SHA-256"},keyMaterial,256);const memberKey=await crypto.subtle.importKey("raw",memberKeyRaw,{name:"AES-GCM"},false,["decrypt"]);const decryptedBuffer=await crypto.subtle.decrypt({name:"AES-GCM",iv:base64ToArrayBuffer(nonce)},memberKey,base64ToArrayBuffer(data));const decryptedJson=(new TextDecoder).decode(decryptedBuffer);decryptedVault=JSON.parse(decryptedJson)}catch(err){showModalAlert("vaultDecryptionFailed");return}decryptedVault.team_data={};const teamKeys=decryptedVault.encrypted_vault?.team_keys||decryptedVault.team_keys;if(!teamKeys||Object.keys(teamKeys).length===0){showModalAlert("unlockNoTeams");renderMemberVault(decryptedVault);showScreen("memberPanel");return}for(const[teamId,teamKeyEntry]of Object.entries(teamKeys)){try{const teamBlock=vaultJson.teams?.[teamId];if(!teamBlock)continue;const{data:teamData,nonce:teamNonce,metadata:teamMetadata}=teamBlock;const cleanTeamMeta={...teamMetadata};delete cleanTeamMeta.checksum;const expectedChecksum=await generateChecksum(teamData+teamNonce+stableStringify(cleanTeamMeta));if(expectedChecksum!==teamMetadata.checksum)continue;const keyBase64=typeof teamKeyEntry==="string"?teamKeyEntry:teamKeyEntry?.data;if(!keyBase64)continue;const teamKeyBuffer=base64ToArrayBuffer(keyBase64);const teamKey=await crypto.subtle.importKey("raw",teamKeyBuffer,{name:"AES-GCM"},false,["decrypt"]);const teamDecryptedBuffer=await crypto.subtle.decrypt({name:"AES-GCM",iv:base64ToArrayBuffer(teamNonce)},teamKey,base64ToArrayBuffer(teamData));const teamDecryptedJson=(new TextDecoder).decode(teamDecryptedBuffer);const teamDecrypted=JSON.parse(teamDecryptedJson);decryptedVault.team_data[teamId]=teamDecrypted;resetTimer()}catch(teamErr){console.error(`❗ Failed to decrypt team ${teamId}:`,teamErr);continue}}document.getElementById("memberPassword").value="";userTOTP="";renderMemberVault(decryptedVault);showScreen("memberPanel");return decryptedVault}catch(err){document.getElementById("memberPassword").value="";userTOTP="";showModalAlert("vaultImportError");console.error("❗ Unexpected error in member import:",err)}}async function handleCompleteAdminVaultImport(){try{if(isViewerRateLimited()){showModalAlert("rateLimitExceeded");return}recordViewerAttempt();const adminPassword=document.getElementById("adminPasswordEditorInput").value;const adminTOTP=document.getElementById("adminEditorTOTPInput").value;const isTOTPValid=validateTOTPCode(adminTOTP);if(!isTOTPValid){document.getElementById("adminEditorTOTPInput").value="";document.getElementById("adminEditorTOTPInput").focus();showModalAlert("invalidTOTP");return}let response;let vaultJson;let vaultSource="unknown";let cachedResponse=null;try{response=await fetch("/vault/team-vault.json",{method:"GET"});if(!response.ok)throw new Error("Fetch failed");vaultJson=await response.clone().json()}catch(err){const cache=await caches.open("carrypass-configs-v1");cachedResponse=await cache.match("/vault/team-vault.json");if(cachedResponse){response=cachedResponse;vaultJson=await cachedResponse.clone().json()}else{showModalAlert("noVaultFileFound");return}}vaultSource=response.headers.get("x-cache-source")||"network";const{admin_vault_metadata,admin}=vaultJson;const{nonce,salt,expiry,checksum}=admin_vault_metadata;const computedChecksum=await generateChecksum(admin+salt+nonce);if(computedChecksum!==checksum){const proceed=await confirmModal("checksumMismatchPrompt");if(!proceed)return}if(expiry&&new Date>new Date(expiry)){const proceed=await confirmModal("adminVaultExpired");if(!proceed)return}await new Promise(resolve=>setTimeout(resolve,50));const enc=new TextEncoder;const keyMaterial=await crypto.subtle.importKey("raw",enc.encode(adminPassword),{name:"PBKDF2"},false,["deriveBits"]);const adminSalt=base64ToArrayBuffer(salt);const finalSalt=await getFinalSalt(adminSalt,adminPassword);const adminKeyRaw=await crypto.subtle.deriveBits({name:"PBKDF2",salt:finalSalt,iterations:3e5,hash:"SHA-256"},keyMaterial,256);const adminKey=await crypto.subtle.importKey("raw",adminKeyRaw,{name:"AES-GCM"},false,["decrypt"]);let decryptedBuffer;try{const iv=base64ToArrayBuffer(nonce);decryptedBuffer=await crypto.subtle.decrypt({name:"AES-GCM",iv:iv},adminKey,base64ToArrayBuffer(admin))}catch(decryptErr){console.error("❌ Vault decryption failed:",decryptErr);showModalAlert("vaultDecryptionFailed");return}const decryptedJson=(new TextDecoder).decode(decryptedBuffer);const{members,teams,adminUsername}=JSON.parse(decryptedJson);normalizeAllExpiryDates(members);vault.members=members;vault.teams=teams;vault.adminUsername=adminUsername;vault.adminMetadata=admin_vault_metadata;if(admin_vault_metadata?.expiry){const expiryField=document.getElementById("vaultExpirationDisplay");if(expiryField){expiryField.innerText=admin_vault_metadata.expiry}}const sourceLabel=document.getElementById("vaultSourceLabelAdmin");if(sourceLabel){sourceLabel.textContent=t("vaultLoadedFrom",{source:vaultSource});sourceLabel.style.color=vaultSource==="cache"?"#ff6607":"#198754";const headerSource=response?.headers.get("x-cached-at");if(headerSource&&headerSource!=="unknown"){const formatted=formatDateTime(headerSource);sourceLabel.textContent+=` (cached at: ${formatted})`}}document.getElementById("adminPasswordEditorInput").value="";document.getElementById("adminEditorTOTPInput").value="";resetTimer();updateAllUI();showScreen("adminPanel")}catch(err){document.getElementById("adminPasswordEditorInput").value="";document.getElementById("adminEditorTOTPInput").value="";console.error("❌ Unexpected error during vault import:",err);showModalAlert("vaultImportError")}}async function handleMemberVaultImport(){try{if(isViewerRateLimited()){showModalAlert("rateLimitExceeded");return}recordViewerAttempt();const memberId=window.sessionMemberId;const memberPassword=document.getElementById("memberPassword").value;let response;let vaultJson;let vaultSource="unknown";let cachedResponse=null;try{response=await fetch("/vault/team-vault.json",{method:"GET"});if(!response.ok)throw new Error("Fetch failed");vaultJson=await response.clone().json()}catch(err){const cache=await caches.open("carrypass-configs-v1");cachedResponse=await cache.match("/vault/team-vault.json");if(cachedResponse){response=cachedResponse;vaultJson=await cachedResponse.clone().json()}else{showModalAlert("noVaultFileFound");return}}vaultSource=response.headers.get("x-cache-source")||"network";const memberBlock=vaultJson.members?.[memberId];if(!memberBlock){showModalAlert("memberNotFound");return}const requiresTOTP=memberBlock.metadata?.totp_required==="yes";let userTOTP="";if(requiresTOTP){const{passPromise,showError,close}=openCarryPasscodeModal("enterCode");try{const code=await passPromise;if(!validateTOTPCode(code)){showError("invalidTotpError");return}userTOTP=code;close()}catch(err){return}}const{data,nonce,metadata}=memberBlock;if(metadata?.expiry&&new Date>new Date(metadata.expiry)){showModalAlert("memberVaultExpired");return}const cleanMeta={...metadata};delete cleanMeta.checksum;const memberChecksum=await generateChecksum(data+nonce+stableStringify(cleanMeta));if(memberChecksum!==metadata.checksum){showModalAlert("memberChecksumMismatch");return}const baseSalt=base64ToArrayBuffer(metadata.salt);const finalSalt=await getFinalSalt(baseSalt,memberPassword);let decryptedVault;try{const enc=new TextEncoder;const keyMaterial=await crypto.subtle.importKey("raw",enc.encode(memberPassword),{name:"PBKDF2"},false,["deriveBits"]);const memberKeyRaw=await crypto.subtle.deriveBits({name:"PBKDF2",salt:finalSalt,iterations:3e5,hash:"SHA-256"},keyMaterial,256);const memberKey=await crypto.subtle.importKey("raw",memberKeyRaw,{name:"AES-GCM"},false,["decrypt"]);const decryptedBuffer=await crypto.subtle.decrypt({name:"AES-GCM",iv:base64ToArrayBuffer(nonce)},memberKey,base64ToArrayBuffer(data));const decryptedJson=(new TextDecoder).decode(decryptedBuffer);decryptedVault=JSON.parse(decryptedJson)}catch(err){showModalAlert("vaultDecryptionFailed");return}decryptedVault.team_data={};const teamKeys=decryptedVault.encrypted_vault?.team_keys||decryptedVault.team_keys;if(!teamKeys||Object.keys(teamKeys).length===0){showModalAlert("unlockNoTeams");renderMemberVault(decryptedVault);showScreen("memberPanel");return}for(const[teamId,teamKeyEntry]of Object.entries(teamKeys)){try{const teamBlock=vaultJson.teams?.[teamId];if(!teamBlock){continue}const{data:teamData,nonce:teamNonce,metadata:teamMetadata}=teamBlock;const cleanTeamMeta={...teamMetadata};delete cleanTeamMeta.checksum;const expectedChecksum=await generateChecksum(teamData+teamNonce+stableStringify(cleanTeamMeta));if(expectedChecksum!==teamMetadata.checksum){continue}const keyBase64=typeof teamKeyEntry==="string"?teamKeyEntry:teamKeyEntry?.data;if(!keyBase64){console.error(`❗ Missing key for team ${teamId}`);continue}const teamKeyBuffer=base64ToArrayBuffer(keyBase64);const teamKey=await crypto.subtle.importKey("raw",teamKeyBuffer,{name:"AES-GCM"},false,["decrypt"]);const teamDecryptedBuffer=await crypto.subtle.decrypt({name:"AES-GCM",iv:base64ToArrayBuffer(teamNonce)},teamKey,base64ToArrayBuffer(teamData));const teamDecryptedJson=(new TextDecoder).decode(teamDecryptedBuffer);const teamDecrypted=JSON.parse(teamDecryptedJson);decryptedVault.team_data[teamId]=teamDecrypted;resetTimer()}catch(teamErr){console.error(`❗ Failed to decrypt team ${teamId}:`,teamErr);continue}}const sourceLabel=document.getElementById("vaultSourceLabel");if(sourceLabel){sourceLabel.textContent=t("vaultLoadedFrom",{source:vaultSource});sourceLabel.style.color=vaultSource==="cache"?"#ff6607":"#198754";const headerSource=response?.headers.get("x-cached-at");if(headerSource&&headerSource!=="unknown"){const formatted=formatDateTime(headerSource);sourceLabel.textContent+=` (cached at: ${formatted})`}}document.getElementById("memberPassword").value="";userTOTP="";renderMemberVault(decryptedVault);showScreen("memberPanel");return decryptedVault}catch(err){document.getElementById("memberPassword").value="";userTOTP="";showModalAlert("vaultImportError");console.error("❗ Unexpected error in member import:",err)}}function formatDateTime(isoString){const d=new Date(isoString);return`${d.toLocaleDateString()} ${d.toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"})}`}document.addEventListener("DOMContentLoaded",()=>{document.getElementById("adminEditFileInputText").addEventListener("change",e=>handleVaultFileUpload(e,"admin"));document.getElementById("memberGappedFileInputText").addEventListener("change",e=>handleVaultFileUpload(e,"member"))});document.addEventListener("DOMContentLoaded",()=>{document.getElementById("passCodeInputRegisterShow")?.addEventListener("click",e=>showManyPassword(e.currentTarget));document.getElementById("passCodeInputShow")?.addEventListener("click",e=>showManyPassword(e.currentTarget));document.getElementById("masterPass")?.addEventListener("click",e=>showMasterPassword(e.currentTarget));document.getElementById("iterCount")?.addEventListener("click",e=>showManyPassword(e.currentTarget));document.getElementById("sixthButton")?.addEventListener("click",e=>showManyPassword(e.currentTarget));document.getElementById("mainButton")?.addEventListener("click",e=>showManyPassword(e.currentTarget));document.getElementById("firstButton")?.addEventListener("click",e=>showManyPassword(e.currentTarget));document.getElementById("secondButton")?.addEventListener("click",e=>showManyPassword(e.currentTarget));document.getElementById("thirdButton")?.addEventListener("click",e=>showManyPassword(e.currentTarget));document.getElementById("fourthButton")?.addEventListener("click",e=>showManyPassword(e.currentTarget));document.getElementById("fifthButton")?.addEventListener("click",e=>showManyPassword(e.currentTarget));document.getElementById("editPasswordToggle")?.addEventListener("click",e=>{showManyPassword(e.currentTarget)});document.getElementById("createPasswordToggle")?.addEventListener("click",e=>{showManyPassword(e.currentTarget)});document.getElementById("memberPasswordToggle")?.addEventListener("click",e=>{showManyPassword(e.currentTarget)});document.getElementById("memberFinalizePasswordToggle")?.addEventListener("click",e=>{showManyPassword(e.currentTarget)});document.getElementById("adminPasswordInputToggle")?.addEventListener("click",e=>{showManyPassword(e.currentTarget)});document.getElementById("adminPasswordEditorInputToggle")?.addEventListener("click",e=>{showManyPassword(e.currentTarget)});document.getElementById("adminExportPasswordToggle")?.addEventListener("click",e=>{showManyPassword(e.currentTarget)});document.getElementById("exportImportShow")?.addEventListener("click",e=>showManyPassword(e.currentTarget));document.getElementById("clearGeneratedPasswords")?.addEventListener("click",e=>clearAllPassword(e.currentTarget));document.getElementById("collectInput")?.addEventListener("click",e=>collectInputData(e.currentTarget));document.getElementById("onAdminEntryCheck")?.addEventListener("click",onAdminEntry);document.getElementById("memberUnlockScreen")?.addEventListener("click",()=>showScreen("memberUnlockPanel"));document.getElementById("uploadConfigToMemberPanel")?.addEventListener("click",()=>showScreen("memberUnlockPanel"));document.getElementById("logoutAdminEditDesktop")?.addEventListener("click",logoutAdmin);document.getElementById("logoutAdminEditMobile")?.addEventListener("click",logoutAdmin);document.getElementById("logoutMemberFromVault")?.addEventListener("click",logoutAdmin);document.getElementById("teamSearchInput")?.addEventListener("input",()=>onSearchTeams());document.getElementById("createTeamModal")?.addEventListener("click",showCreateTeamModal);document.getElementById("createTeamUnit")?.addEventListener("click",createTeam);document.getElementById("hideCreateTeamUnit")?.addEventListener("click",hideCreateTeamModal);document.addEventListener("click",e=>{const btn=e.target.closest('[id^="deleteTeamButton-"]');if(btn){const id=btn.id.replace("deleteTeamButton-","");deleteTeam(id)}});document.addEventListener("click",e=>{const btn=e.target.closest('[id^="deleteMemberFromList-"]');if(btn){const id=btn.id.replace("deleteMemberFromList-","");deleteMember(id)}});document.addEventListener("click",e=>{const btn=e.target.closest('[id^="assignmentButton-"]');if(btn){const id=btn.id.replace("assignmentButton-","");openAssignMemberToTeamModal(id)}});document.addEventListener("click",e=>{const btn=e.target.closest('[id^="finaliseMemberButton-"]');if(btn){const id=btn.id.replace("finaliseMemberButton-","");openMemberFinalizeModal(id)}});document.addEventListener("click",e=>{const editBtn=e.target.closest(".edit-credential-btn");if(editBtn){const teamId=editBtn.dataset.teamId;const index=parseInt(editBtn.dataset.index,10);showEditCredentialModal(teamId,index);return}const deleteBtn=e.target.closest(".delete-credential-btn");if(deleteBtn){const teamId=deleteBtn.dataset.teamId;const index=parseInt(deleteBtn.dataset.index,10);deleteCredential(teamId,index)}});document.addEventListener("click",e=>{const button=e.target.closest('[id^="credBlockShow__"]');if(button){showManyPassword(button)}});document.addEventListener("click",e=>{const btn=e.target.closest(".open-url-button");if(!btn)return;const url=btn.getAttribute("data-url");if(url&&url.startsWith("https://")){window.open(url,"_blank")}else{showModalAlert("Not a clickable URL")}});document.addEventListener("change",e=>{const toggle=e.target.closest(".toggle");if(toggle&&toggle.id.startsWith("totptoggle-")){const id=toggle.id.replace("totptoggle-","");toggleTOTPRequirement(id,toggle.checked)}});document.addEventListener("change",e=>{const input=e.target.closest('[id^="dateChangeInput-"]');if(input){const id=input.id.replace("dateChangeInput-","");updateMemberExpiry(id,input.value)}});document.addEventListener("click",e=>{const btn=e.target.closest('[id^="removeMember-"]');if(btn){const[memberId,tid]=btn.id.replace("removeMember-","").split("-");removeMemberFromTeam(memberId,tid)}});document.getElementById("toggleExpirySort").addEventListener("click",e=>{const button=e.currentTarget;const isActive=button.getAttribute("data-active")==="true";if(isActive){button.setAttribute("data-active","false");button.classList.remove("active");updateMembersList()}else{button.setAttribute("data-active","true");button.classList.add("active");updateMembersListSortedByExpiry()}});document.addEventListener("click",e=>{const btn=e.target.closest("[data-password-id]");if(btn){copyPasswordCheck(btn)}});document.getElementById("toggleInfoWhatisit")?.addEventListener("click",toggleInfo);document.getElementById("toggleInfoWhatisitEntry")?.addEventListener("click",toggleInfoEntry);document.getElementById("backToTeamsPanel")?.addEventListener("click",()=>showScreen("memberUnlockPanel"));document.getElementById("firstUnlockAdminVault")?.addEventListener("click",adminUnlockVault);document.getElementById("memberVaultImportButton")?.addEventListener("click",handleMemberVaultImport);document.getElementById("startQrScan")?.addEventListener("click",startQrScan);document.getElementById("stopScanButton")?.addEventListener("click",stopQrScan);document.getElementById("handleCompleteAdminVault")?.addEventListener("click",handleCompleteAdminVaultImport);document.getElementById("adminToMemberUnlock")?.addEventListener("click",()=>showScreen("memberUnlockPanel"));document.getElementById("credentialSearchInput")?.addEventListener("input",()=>onSearchCredentials());document.getElementById("credentialSearchByTeam")?.addEventListener("input",()=>onSearchCredentialsByTeam());document.getElementById("addCredentialButton")?.addEventListener("click",showAddCredentialModal);document.getElementById("addCredentialByModal")?.addEventListener("click",addCredential);document.getElementById("hideCredentialAddModal")?.addEventListener("click",hideCredentialModal);document.getElementById("memberSearchInput")?.addEventListener("input",()=>onSearchMembers());document.getElementById("createMemberShow")?.addEventListener("click",showCreateMemberModal);document.getElementById("realCreateMember")?.addEventListener("click",createMember);document.getElementById("realCreateMemberHide")?.addEventListener("click",hideCreateMemberModal);document.getElementById("assignmentSearchInput")?.addEventListener("input",()=>onSearchAssignments());document.getElementById("assignmentSearchByTeam")?.addEventListener("input",()=>onSearchAssignmentsByTeamUI());document.getElementById("removeTeamMemberAssignment")?.addEventListener("click",()=>removeMemberFromTeam("{{ member.id }}","{{ this.id }}"));document.getElementById("vaultExportModalShow")?.addEventListener("click",showExportModal);document.getElementById("cancelAssignButton")?.addEventListener("click",closeAssignMemberModal);document.getElementById("assignMemberButton")?.addEventListener("click",confirmAssignMemberToTeam);document.getElementById("closeMemberFinalizeButton")?.addEventListener("click",closeMemberFinalizeModal);document.getElementById("memberFinalizeButton")?.addEventListener("click",finalizeMember);document.getElementById("cancelAdminExport")?.addEventListener("click",closeExportModal);document.getElementById("adminExportsVault")?.addEventListener("click",handleCompleteVaultExport);document.getElementById("deleteQrOutput")?.addEventListener("click",deleteQrCode);document.getElementById("adminPasswordGenerator1")?.addEventListener("click",openAdminPasswordModal);document.getElementById("adminPasswordGenerator2")?.addEventListener("click",openAdminPasswordModal);document.getElementById("closeAdminPasswordGenerator")?.addEventListener("click",closeAdminPasswordModal);document.getElementById("exportAuditLogFile")?.addEventListener("click",exportAuditLogFile);document.getElementById("trustAnotherDeviceButton")?.addEventListener("click",closeQRModal);document.getElementById("password").addEventListener("input",e=>{updateSingleFeedbackIcon(e.target.value)});document.getElementById("passwordAdmin").addEventListener("input",e=>{updateSingleFeedbackIconAdmin(e.target.value)});document.getElementById("password").addEventListener("keydown",function(event){if(event.key==="Enter"){event.preventDefault();collectInputData()}});document.getElementById("passwordAdmin").addEventListener("keydown",function(event){if(event.key==="Enter"){event.preventDefault();collectInputDataAdmin()}});document.getElementById("passCodeInputRegister").addEventListener("keydown",function(event){if(event.key==="Enter"){event.preventDefault();handlePasscodeSubmit("register")}});document.getElementById("passCodeInput").addEventListener("keydown",function(event){if(event.key==="Enter"){event.preventDefault();handlePasscodeSubmit("login")}});document.getElementById("memberPassword").addEventListener("keydown",function(event){if(event.key==="Enter"){event.preventDefault();handleMemberVaultImport()}});document.getElementById("adminEditorTOTPInput").addEventListener("keydown",function(event){if(event.key==="Enter"){event.preventDefault();handleCompleteAdminVaultImport()}})});function updateAdminFileName(){const fileInputAdmin=document.getElementById("adminFileInput");const fileInputTextAdmin=document.getElementById("adminFileInputText");const fileNameAdmin=fileInputAdmin.files[0]?fileInputAdmin.files[0].name:"Choose file";fileInputTextAdmin.value=fileNameAdmin}const adminFileButton=document.getElementById("adminFileButton");const adminFileInput=document.getElementById("adminFileInput");if(adminFileButton&&adminFileInput){adminFileButton.addEventListener("click",function(){adminFileInput.click()})}if(adminFileInput){adminFileInput.addEventListener("change",event=>{updateAdminFileName();handleAdminConfigUpload(event)})}function updateAdminEditFileName(){const fileInput=document.getElementById("adminEditFileInput");const fileNameField=document.getElementById("adminEditFileInputText");const fileName=fileInput.files[0]?fileInput.files[0].name:"Choose file";fileNameField.value=fileName}const adminEditFileButton=document.getElementById("adminEditFileButton");const adminEditFileInput=document.getElementById("adminEditFileInput");if(adminEditFileButton&&adminEditFileInput){adminEditFileButton.addEventListener("click",()=>{adminEditFileInput.click()})}if(adminEditFileInput){adminEditFileInput.addEventListener("change",event=>{updateAdminEditFileName();const file=event.target.files[0];if(!file)return;const reader=new FileReader;reader.onload=async function(e){try{const vaultJson=JSON.parse(e.target.result);await handleCompleteAdminVaultImportFromFile(vaultJson)}catch(err){console.error("❌ Error importing admin vault:",err);showModalAlert("vaultImportFailed")}finally{adminEditFileInput.value=""}};reader.readAsText(file)})}function updateMemberGappedFileName(){const fileInput=document.getElementById("memberGappedFileInput");const fileNameField=document.getElementById("memberGappedFileInputText");const fileName=fileInput.files[0]?fileInput.files[0].name:"Choose file";fileNameField.value=fileName}const memberGappedFileButton=document.getElementById("memberGappedFileButton");const memberGappedFileInput=document.getElementById("memberGappedFileInput");if(memberGappedFileButton&&memberGappedFileInput){memberGappedFileButton.addEventListener("click",()=>{memberGappedFileInput.click()})}if(memberGappedFileInput){memberGappedFileInput.addEventListener("change",event=>{updateMemberGappedFileName();const file=event.target.files[0];if(!file)return;const reader=new FileReader;reader.onload=async function(e){try{const vaultJson=JSON.parse(e.target.result);await handleMemberVaultImportFromFile(vaultJson)}catch(err){console.error("❌ Error importing member vault:",err);showModalAlert("vaultImportFailed")}finally{memberGappedFileInput.value=""}};reader.readAsText(file)})}const ENTROPY_THRESHOLDS={low:128,good:256};function calculateEntropyMaster(password){if(!password||typeof password!=="string")return 0;try{const charsetSize=new Set(password.split("")).size||1;return password.length*Math.log2(charsetSize)}catch(err){console.error("Entropy calculation error:",err);return 0}}function updatePasswordStrengthMaster(password){const bar=document.getElementById("passwordStrengthBarAdmin");const label=document.getElementById("passwordStrengthTextAdmin");const entropyLabel=document.getElementById("entropyTextAdmin");if(!password){label.innerText="";entropyLabel.innerText="";bar.className="";return}const entropy=calculateEntropyMaster(password);let strength="low";if(entropy>=ENTROPY_THRESHOLDS.good){strength="excellent"}else if(entropy>=ENTROPY_THRESHOLDS.low){strength="good"}bar.className="";bar.classList.add(strength);const colors={low:"red",good:"orange",excellent:"green"};label.innerText=strength.charAt(0).toUpperCase()+strength.slice(1);label.style.color=colors[strength];entropyLabel.innerText=`Entropy: ${entropy.toFixed(2)} (${strength})`}function updatePasswordStrengthAdmin(password){const bar=document.getElementById("passwordStrengthBarAdminPlus");const label=document.getElementById("passwordStrengthTextAdminPlus");const entropyLabel=document.getElementById("entropyTextAdminPlus");if(!password){label.innerText="";entropyLabel.innerText="";bar.className="";return}const entropy=calculateEntropyMaster(password);let strength="low";if(entropy>=ENTROPY_THRESHOLDS.good){strength="excellent"}else if(entropy>=ENTROPY_THRESHOLDS.low){strength="good"}bar.className="";bar.classList.add(strength);const colors={low:"red",good:"orange",excellent:"green"};label.innerText=strength.charAt(0).toUpperCase()+strength.slice(1);label.style.color=colors[strength];entropyLabel.innerText=`Entropy: ${entropy.toFixed(2)} (${strength})`}function updatePasswordStrengthMember(password){const bar=document.getElementById("passwordStrengthBarMember");const label=document.getElementById("passwordStrengthTextMember");const entropyLabel=document.getElementById("entropyTextMember");if(!password){label.innerText="";entropyLabel.innerText="";bar.className="";return}const entropy=calculateEntropyMaster(password);let strength="low";if(entropy>=ENTROPY_THRESHOLDS.good){strength="excellent"}else if(entropy>=ENTROPY_THRESHOLDS.low){strength="good"}bar.className="";bar.classList.add(strength);const colors={low:"red",good:"orange",excellent:"green"};label.innerText=strength.charAt(0).toUpperCase()+strength.slice(1);label.style.color=colors[strength];entropyLabel.innerText=`Entropy: ${entropy.toFixed(2)} (${strength})`}const mainPasswordInput=document.getElementById("adminExportPassword");if(mainPasswordInput){mainPasswordInput.addEventListener("input",e=>updatePasswordStrengthMaster(e.target.value));mainPasswordInput.addEventListener("blur",e=>updatePasswordStrengthMaster(e.target.value))}const mainPasswordInputAdmin=document.getElementById("mainPasswordAdmin");if(mainPasswordInputAdmin){mainPasswordInputAdmin.addEventListener("input",e=>updatePasswordStrengthAdmin(e.target.value));mainPasswordInputAdmin.addEventListener("blur",e=>updatePasswordStrengthAdmin(e.target.value))}const mainPasswordInputMember=document.getElementById("memberFinalizeMasterPassword");if(mainPasswordInputMember){mainPasswordInputMember.addEventListener("input",e=>updatePasswordStrengthMember(e.target.value));mainPasswordInputMember.addEventListener("blur",e=>updatePasswordStrengthMember(e.target.value))}function isPasswordStrongEnough(password){return calculateEntropyMaster(password)>=ENTROPY_THRESHOLDS.low}function openAdminPasswordModal(){document.getElementById("adminPasswordGeneratorModal").classList.remove("hidden");document.getElementById("adminPasswordGeneratorModal").classList.add("active");resetTimer()}function closeAdminPasswordModal(){document.getElementById("adminPasswordGeneratorModal").classList.add("hidden");document.getElementById("adminPasswordGeneratorModal").classList.remove("active");document.getElementById("webAddressAdmin").value="";document.getElementById("passwordAdmin").value="";document.getElementById("lengthAdmin").value=43;document.getElementById("iterationCountAdmin").value=5e4;document.getElementById("mainPasswordAdmin").value="";document.getElementById("passwordStrengthBarAdminPlus").innerText="";document.getElementById("passwordStrengthTextAdminPlus").innerText="";document.getElementById("entropyTextAdminPlus").innerText="";document.getElementById("createdforAdmin").innerText="";document.getElementById("toggle1Admin").checked=true;document.getElementById("toggle2Admin").checked=true;document.getElementById("toggle3Admin").checked=true;document.getElementById("toggle4Admin").checked=true;document.getElementById("toggle5Admin").checked=false;resetTimer()}document.addEventListener("DOMContentLoaded",()=>{document.getElementById("masterPassAdmin")?.addEventListener("click",e=>showMasterPassword(e.currentTarget));document.getElementById("mainButtonAdmin")?.addEventListener("click",e=>showManyPassword(e.currentTarget));document.getElementById("iterCountAdmin")?.addEventListener("click",e=>showManyPassword(e.currentTarget));document.getElementById("collectInputAdmin")?.addEventListener("click",async()=>{const result=await collectInputDataAdmin();if(result){updatePasswordStrengthAdmin(result)}})});async function collectInputDataAdmin(){const button=document.getElementById("collectInputAdmin");const status=document.getElementById("generationStatusAdmin");const webAddressField=document.getElementById("webAddressAdmin");const passwordField=document.getElementById("passwordAdmin");if(!webAddressField.value.trim()){webAddressField.focus();return null}if(!passwordField.value.trim()){passwordField.focus();return null}if(passwordField.value.trim().length<12){showModalAlert("masterPasswordLength");passwordField.focus();return null}button.disabled=true;status.style.visibility="visible";const webAddressInput=webAddressField.value;const passwordInput=passwordField.value;const lengthInput=parseInt(document.getElementById("lengthAdmin").value,10);const iterationCountInput=parseInt(document.getElementById("iterationCountAdmin").value,10);const uppercaseChecked=document.getElementById("toggle1Admin").checked;const lowercaseChecked=document.getElementById("toggle2Admin").checked;const numbersChecked=document.getElementById("toggle3Admin").checked;const symbolsChecked=document.getElementById("toggle4Admin").checked;const separatorChecked=document.getElementById("toggle5Admin").checked;const charTypes={uppercase:uppercaseChecked,lowercase:lowercaseChecked,numbers:numbersChecked,symbols:symbolsChecked};resetTimer();await new Promise(resolve=>setTimeout(resolve,10));const generatedPassword=await generateDeterministicPasswordsWithAESCTRAdmin(webAddressInput,passwordInput,lengthInput,iterationCountInput,charTypes,separatorChecked);button.disabled=false;status.style.visibility="hidden";resetSingleFeedbackIconAdmin();return generatedPassword}async function generateDeterministicPasswordsWithAESCTRAdmin(webAddress,masterPassword,length,iterationCount,charTypes,segmented=false){const supplementaryInputs=["mainPasswordAdmin"];const normalizedService=normalizeServiceName(webAddress);let charset="";if(charTypes.uppercase)charset+=PASSWORDCHARSETS.upperAlpha;if(charTypes.lowercase)charset+=PASSWORDCHARSETS.lowerAlpha;if(charTypes.numbers)charset+=PASSWORDCHARSETS.numbers;if(charTypes.symbols)charset+=PASSWORDCHARSETS.special;if(!charset){showModalAlert("selectMinCharType");return[]}const saltInputArgon=normalizedService+"::"+iterationCount+"::"+length;const argonSalt=(new TextEncoder).encode(saltInputArgon);const options=mapArgonOptions(iterationCount);const argonHash=await argon2.hash({pass:masterPassword,salt:argonSalt,...options,hashLen:32,raw:true});const argonEnhancer=Array.from(argonHash.hash).map(b=>b.toString(16).padStart(2,"0")).join("");const saltInput=normalizedService+"::"+iterationCount+"::"+length+"::"+argonEnhancer;const salt=CryptoJS.SHA256(saltInput).toString();const key=CryptoJS.PBKDF2(masterPassword,salt,{keySize:256/32,iterations:getEffectivePBKDF2Iterations(iterationCount),hasher:CryptoJS.algo.SHA256});let stream=CryptoJS.lib.WordArray.create();let blockCounter=0;while(stream.words.length*4<length*2){const counterIvHex=CryptoJS.SHA256(`pwgen::${normalizedService}::0::${blockCounter}`).toString().substring(0,32);const iv=CryptoJS.enc.Hex.parse(counterIvHex);const inputBlock=CryptoJS.enc.Hex.parse("00000000000000000000000000000000");const encrypted=CryptoJS.AES.encrypt(inputBlock,key,{mode:CryptoJS.mode.CTR,iv:iv,padding:CryptoJS.pad.NoPadding});stream=CryptoJS.lib.WordArray.create(stream.words.concat(encrypted.ciphertext.words));blockCounter++}const rules=[];if(charTypes.uppercase)rules.push("[A-Z]");if(charTypes.lowercase)rules.push("[a-z]");if(charTypes.numbers)rules.push("[0-9]");if(charTypes.symbols)rules.push("[!@#$%^&*()\\-_=+\\[\\]{}|;:,.<>?]");let password=formatKeyPass(stream,length,charset,rules,normalizedService);if(segmented){password=segmentKeyFixedLength(password,7,"-")}document.getElementById(supplementaryInputs[0]).value=password;const generated=document.getElementById("generatedPasswordAdmin");showSmooth(generated);document.getElementById("createdforAdmin").innerHTML="<b>"+webAddress+"</b>";document.getElementById("webAddressAdmin").value="";document.getElementById("passwordAdmin").value="";document.getElementById("generationStatusAdmin").style.visibility="hidden";updateCounter();resetTimer();return password}function updateArgonTierLabel(){const input=document.getElementById("iterationCount");const label=document.getElementById("argonTierLabel");const val=parseInt(input.value);if(isNaN(val)||val<=0){label.textContent="";return}if(val>66666){label.textContent="🔺 Extreme"}else if(val>33333){label.textContent="🔸 Hardened"}else{label.textContent="🔹 Standard"}}const iterationInput=document.getElementById("iterationCount");iterationInput.addEventListener("input",updateArgonTierLabel);iterationInput.addEventListener("blur",updateArgonTierLabel);document.addEventListener("DOMContentLoaded",updateArgonTierLabel);iterationInput.addEventListener("change",updateArgonTierLabel);function toggleInfo(){const content=document.getElementById("infoContent");const arrow=document.getElementById("infoArrow");const isOpen=content.style.display==="block";content.style.display=isOpen?"none":"block";arrow.textContent=isOpen?"▼":"▲";arrow.classList.toggle("expanded",!isOpen)}function toggleInfoEntry(){const content=document.getElementById("infoContentEntry");const arrow=document.getElementById("infoArrowEntry");const isOpen=content.style.display==="block";content.style.display=isOpen?"none":"block";arrow.textContent=isOpen?"▼":"▲";arrow.classList.toggle("expanded",!isOpen)}function showGlobalTooltip(trigger,translationKey,titleText){const lang=localStorage.getItem("preferredLanguage")||"en";const tooltip=document.getElementById("globalTooltip");document.getElementById("globalTooltipTitle").innerText=titleText||"";document.getElementById("globalTooltipBody").innerText=translations[lang]?.[translationKey]||"";tooltip.style.display="block";tooltip.setAttribute("data-i18n-tooltip-key",translationKey);tooltip.triggerElement=trigger;requestAnimationFrame(()=>{const rect=trigger.getBoundingClientRect();const tooltipRect=tooltip.getBoundingClientRect();const padding=8;let top=rect.bottom+padding;if(top+tooltipRect.height>window.innerHeight-padding){top=rect.top-tooltipRect.height-padding}tooltip.style.top=`${top}px`;tooltip.classList.add("visible")});window.addEventListener("scroll",hideGlobalTooltip,{once:true});window.addEventListener("resize",hideGlobalTooltip,{once:true})}function hideGlobalTooltip(){const tooltip=document.getElementById("globalTooltip");tooltip.classList.remove("visible");tooltip.style.display="none"}document.querySelectorAll(".info-icon-wrapper").forEach(button=>{const tooltipId=button.getAttribute("aria-describedby");const tooltipElement=document.getElementById(tooltipId);if(!tooltipElement)return;const tooltipBody=tooltipElement.querySelector(".tooltip-body");const tooltipTitle=tooltipElement.querySelector(".tooltip-title");const bodyKey=tooltipBody?.getAttribute("data-i18n-tooltip");const titleKey=tooltipTitle?.getAttribute("data-i18n-title");button.addEventListener("click",()=>{if(bodyKey&&titleKey){const lang=localStorage.getItem("preferredLanguage")||"en";const titleText=translations[lang]?.[titleKey]||tooltipTitle.innerText;showGlobalTooltip(button,bodyKey,titleText)}})});document.addEventListener("click",e=>{if(!e.target.closest(".info-icon-wrapper")){hideGlobalTooltip()}});document.addEventListener("click",e=>{if(!e.target.closest(".info-icon-wrapper")){document.querySelectorAll(".tooltip.visible").forEach(t=>t.classList.remove("visible"))}});window.addEventListener("scroll",()=>{document.querySelectorAll(".tooltip.visible").forEach(t=>t.classList.remove("visible"))});function generateDefaultFilename(){const now=new Date;const ts=now.toISOString().replace(/[:T]/g,"-").split(".")[0];return`carrypass-audit-log_${ts}.txt`}const auditLogQueue=[];function logAdminAction(action,details={},performedBy="admin"){auditLogQueue.push({timestamp:(new Date).toISOString(),action:action,performed_by:performedBy,details:details})}function exportAuditLogFile(filename){if(typeof filename!=="string"){filename=generateDefaultFilename()}const logText=auditLogQueue.map(entry=>{return`[${entry.timestamp}] ${entry.action.toUpperCase()} by ${entry.performed_by}\n`+JSON.stringify(entry.details,null,2)}).join("\n\n");const checksum=CryptoJS.SHA256(logText).toString();const finalText=`=== CarryPass Audit Log ===\n\n${logText}\n\n=== SHA-256 Checksum ===\n${checksum}\n`;const blob=new Blob([finalText],{type:"text/plain"});const link=document.createElement("a");link.href=URL.createObjectURL(blob);link.download=filename;document.body.appendChild(link);link.click();document.body.removeChild(link)}function extractSecretAndLabelFromURI(uri){const secretMatch=uri.match(/secret=([A-Z2-7]+)/i);const labelMatch=uri.match(/\/[^:]+:([^?]+)/);return{secret:secretMatch?secretMatch[1].toUpperCase():null,label:labelMatch?decodeURIComponent(labelMatch[1]):null}}async function handleScannedQRCode(decodedText){try{if(!sessionKey){showModalAlert("noActiveSession");return}const{secret,label}=extractSecretAndLabelFromURI(decodedText);if(!secret){showModalAlert("❗ Failed to extract TOTP secret from QR.");return}const encoder=new TextEncoder;const secretPayload=encoder.encode(secret);const secretNonce=crypto.getRandomValues(new Uint8Array(12));const secretCiphertext=await crypto.subtle.encrypt({name:"AES-GCM",iv:secretNonce},sessionKey,secretPayload);const secretTag=secretCiphertext.slice(-16);const secretCiphertextWithoutTag=secretCiphertext.slice(0,-16);localStorage.setItem("encryptedQR",JSON.stringify({ciphertext:Array.from(new Uint8Array(secretCiphertextWithoutTag)),nonce:Array.from(secretNonce),tag:Array.from(new Uint8Array(secretTag))}));if(label){const labelPayload=encoder.encode(label);const labelNonce=crypto.getRandomValues(new Uint8Array(12));const labelCiphertext=await crypto.subtle.encrypt({name:"AES-GCM",iv:labelNonce},sessionKey,labelPayload);const labelTag=labelCiphertext.slice(-16);const labelCiphertextWithoutTag=labelCiphertext.slice(0,-16);localStorage.setItem("encryptedLabel",JSON.stringify({ciphertext:Array.from(new Uint8Array(labelCiphertextWithoutTag)),nonce:Array.from(labelNonce),tag:Array.from(new Uint8Array(labelTag))}))}window.sessionTOTPSecret=secret;window.sessionMemberId=label;updateTrustedDeviceIndicator();showModalAlert("qrStoredTrusted")}catch(err){console.error(err);showModalAlert("qrProcessFailed")}}async function getDecryptedQR(){const storedData=JSON.parse(localStorage.getItem("encryptedQR"));if(!storedData||!sessionKey)return null;const{ciphertext,nonce,tag}=storedData;try{const decrypted=await crypto.subtle.decrypt({name:"AES-GCM",iv:new Uint8Array(nonce),tagLength:128},sessionKey,new Uint8Array([...ciphertext,...tag]));return(new TextDecoder).decode(decrypted)}catch(e){console.error("❗ Failed to decrypt QR:",e);return null}}let qrScanner=null;function startQrScan(){qrScanner=new Html5Qrcode("qr-reader");document.getElementById("stopScanButton").style.display="inline-block";qrScanner.start({facingMode:"environment"},{fps:10,qrbox:250},async decodedText=>{try{await handleScannedQRCode(decodedText);const confirmSave=await confirmModal("scannedQrSave");if(confirmSave){saveQrImage(decodedText)}}finally{stopQrScan()}},errorMessage=>{})["catch"](err=>{showModalAlert("cameraAccessDenied");document.getElementById("stopScanButton").style.display="none"})}function stopQrScan(){if(qrScanner){qrScanner.stop().then(()=>{return qrScanner.clear()}).then(()=>{document.getElementById("stopScanButton").style.display="none"})["catch"](err=>{console.warn("Could not stop or clear QR scanner:",err)})}}function saveQrImage(text){const tempContainer=document.createElement("div");document.body.appendChild(tempContainer);const qr=new QRCode(tempContainer,{text:text,width:256,height:256,correctLevel:QRCode.CorrectLevel.M});setTimeout(()=>{const img=tempContainer.querySelector("img");if(!img){console.error("❌ QR code image not rendered.");document.body.removeChild(tempContainer);return}const qrCanvas=document.createElement("canvas");const qrImg=new Image;qrImg.src=img.src;qrImg.onload=()=>{const border=16;const size=qrImg.width+border*2;qrCanvas.width=size;qrCanvas.height=size;const ctx=qrCanvas.getContext("2d");ctx.fillStyle="#ffffff";ctx.fillRect(0,0,size,size);ctx.drawImage(qrImg,border,border);const link=document.createElement("a");link.href=qrCanvas.toDataURL("image/png");link.download="carrypass-qr.png";link.click();document.body.removeChild(tempContainer)}},200)}function updateQRFileName(){const fileInput=document.getElementById("qr-file-input");const fileNameField=document.getElementById("qr-file-inputText");const fileName=fileInput.files[0]?fileInput.files[0].name:"Upload QR image";fileNameField.value=fileName}const qrFileButton=document.getElementById("qr-file-inputButton");const qrFileInput=document.getElementById("qr-file-input");if(qrFileButton&&qrFileInput){qrFileButton.addEventListener("click",()=>{qrFileInput.click()})}if(qrFileInput){qrFileInput.addEventListener("change",async event=>{updateQRFileName();const file=event.target.files[0];if(!file)return;const qrScanner=new Html5Qrcode("qr-reader");try{const result=await qrScanner.scanFile(file,{useSingleCanvas:true});await handleScannedQRCode(result)}catch(err){console.error("❗ QR scan failed:",err);showModalAlert("qrReadFailImage")}finally{qrFileInput.value=""}})}function updateTrustedDeviceIndicator(){const inMemory=!!window.sessionTOTPSecret;const hasStored=!!localStorage.getItem("encryptedQR");document.querySelectorAll("[data-trusted-indicator]").forEach(container=>{const icon=container.querySelector(".trusted-icon");const label=container.querySelector(".trusted-label");if(!icon||!label)return;if(inMemory){icon.setAttribute("data-lucide","monitor-dot");container.title="This device is trusted. TOTP secret is active.";container.classList.remove("untrusted");container.style.display="inline-flex"}else if(hasStored){icon.setAttribute("data-lucide","clock-4");label.textContent="Needs Login";container.title="This device is configured but not currently trusted. Please log in.";container.classList.add("untrusted");container.style.display="inline-flex"}else{container.style.display="none"}});lucide.createIcons()}function closeQRModal(){modal=document.getElementById("qrExportModal");modal.classList.add("hidden");modal.classList.remove("active")}let qrTimeoutId=null;document.addEventListener("click",async e=>{const btn=e.target.closest(".export-qr-button");if(!btn)return;if(!window.sessionTOTPSecret){showModalAlert("totpSecretUnavailable");return}if(!window.sessionMemberId){showModalAlert("totpMemberUnavailable");return}const confirmShare=await confirmModal("shareQrSecretWarning");if(!confirmShare)return;const secret=window.sessionTOTPSecret;const label=window.sessionMemberId;const encodedSecret=encodeURIComponent(secret);const encodedLabel=encodeURIComponent(label);const encodedIssuer=encodeURIComponent("CarryPass Team");const uri=`otpauth://totp/${encodedIssuer}:${encodedLabel}?secret=${encodedSecret}&issuer=${encodedIssuer}`;const container=document.getElementById("qrExportContainer");container.innerHTML="";new QRCode(container,{text:uri,width:220,height:220,correctLevel:QRCode.CorrectLevel.M});const modal=document.getElementById("qrExportModal");modal.classList.remove("hidden");modal.classList.add("active");document.getElementById("qrTimeoutMessage").textContent=t("qrTimeoutStart");clearTimeout(qrTimeoutId);qrTimeoutId=setTimeout(()=>{container.innerHTML="";document.getElementById("qrTimeoutMessage").textContent=t("qrTimeoutExpired")},6e4)});function validateTOTPCode(userInputCode){if(!window.sessionTOTPSecret){showModalAlert("noTotpSecretLoaded");return false}const secret=window.sessionTOTPSecret;const codesToAccept=[generateTOTP(secret,-1),generateTOTP(secret,0),generateTOTP(secret,1),generateTOTP(secret,2)];return codesToAccept.includes(userInputCode.trim())}const ICON_NAMES=["lock","key","user","shield","x","glass-water","hourglass","alarm-clock","zap","cloud","code","cpu","activity","bug","file","archive","apple","bell","moon","sun","hash","box","flag","bookmark","bell","command","globe","link","puzzle"];const ICON_COLORS=["#084298","#0f5132","#842029","#664d03","#5c0d80","#2e2e2e"];async function updateSingleFeedbackIcon(masterPassword){const iconEl=document.querySelector(".feedback-icon");if(!iconEl)return;const{name,color}=await getSingleVisualHashIcon(masterPassword);iconEl.setAttribute("data-lucide",name);iconEl.style.stroke=color;lucide.createIcons()}async function updateSingleFeedbackIconAdmin(masterPassword){const iconEl=document.querySelector(".feedback-icon-admin");if(!iconEl)return;const{name,color}=await getSingleVisualHashIcon(masterPassword);iconEl.setAttribute("data-lucide",name);iconEl.style.stroke=color;lucide.createIcons()}function getPasswordSettingsForIcon(){return{uppercase:document.getElementById("toggle1").checked,lowercase:document.getElementById("toggle2").checked,numbers:document.getElementById("toggle3").checked,symbols:document.getElementById("toggle4").checked,separator:document.getElementById("toggle5").checked,length:document.getElementById("length").value,iterationCount:document.getElementById("iterationCount").value}}async function getSettingsIcon(settings){const inputString=JSON.stringify(settings);const hashBuffer=await crypto.subtle.digest("SHA-256",(new TextEncoder).encode(inputString));const hashArray=Array.from(new Uint8Array(hashBuffer));const iconIndex=hashArray[0]%ICON_NAMES.length;const colorIndex=hashArray[1]%ICON_COLORS.length;return{name:ICON_NAMES[iconIndex],color:ICON_COLORS[colorIndex]}}async function updateSliderIconFromSettings(){const settings=getPasswordSettingsForIcon();const{name,color}=await getSettingsIcon(settings);const iconEl=document.querySelector("#slider1 .feedback-icon-settings");if(!iconEl)return;iconEl.setAttribute("data-lucide",name);iconEl.style.stroke=color;lucide.createIcons()}async function getSingleVisualHashIcon(masterPassword){const hashBuffer=await crypto.subtle.digest("SHA-256",(new TextEncoder).encode(masterPassword));const hashArray=Array.from(new Uint8Array(hashBuffer));const iconIndex=hashArray[0]%ICON_NAMES.length;const colorIndex=hashArray[1]%ICON_COLORS.length;return{name:ICON_NAMES[iconIndex],color:ICON_COLORS[colorIndex]}}function resetSingleFeedbackIcon(){const iconEl=document.querySelector("#masterPass .feedback-icon");if(!iconEl)return;iconEl.setAttribute("data-lucide","square-asterisk");iconEl.style.stroke="gainsboro";iconEl.style.color="gainsboro";iconEl.style.marginRight="0.4rem";lucide.createIcons()}function resetSingleFeedbackIconAdmin(){const iconEl=document.querySelector("#masterPassAdmin .feedback-icon-admin");if(!iconEl)return;iconEl.setAttribute("data-lucide","square-asterisk");iconEl.style.stroke="gainsboro";iconEl.style.color="gainsboro";iconEl.style.marginRight="0.4rem";lucide.createIcons()}async function generateStrongMasterPassword(inputPassword){const PASSWORDCHARSETS={upperAlpha:"ZJVEQSLBWRGNMYXDOCHIPATUKF",lowerAlpha:"pvjaqukxhyngorfizwmtlbdecs",numbers:"72940538615784216903",special:"!@#&$%*^()_[]{}|;:,.<>?/"};const fullCharset=PASSWORDCHARSETS.upperAlpha+PASSWORDCHARSETS.lowerAlpha+PASSWORDCHARSETS.numbers+PASSWORDCHARSETS.special;async function sha256(str){const encoder=new TextEncoder;const data=encoder.encode(str);const hashBuffer=await crypto.subtle.digest("SHA-256",data);return Array.from(new Uint8Array(hashBuffer))}if(!Array.isArray(EFF_WORDS)||EFF_WORDS.length<7776){throw new Error("EFF_WORDS must be a 7776-word array.")}const hash=await sha256(inputPassword);const words=[];for(let i=0;i<4;i++){const high=hash[i*2];const low=hash[i*2+1];const combined=high<<8|low;const index=combined%7776;words.push(EFF_WORDS[index])}const chars=[];for(let i=8;i<22;i++){const index=hash[i]%fullCharset.length;chars.push(fullCharset[index])}return`${words.join("-")}+${chars.join("")}`}async function updateLanguage(lang){localStorage.setItem("preferredLanguage",lang);await loadLanguage(lang);document.querySelectorAll("[data-i18n]").forEach(el=>{const key=el.getAttribute("data-i18n");if(translations[lang]?.[key]){el.innerHTML=translations[lang][key]}});setTimeout(()=>{document.querySelectorAll("[data-i18n-tooltip]").forEach(el=>{const key=el.getAttribute("data-i18n-tooltip");if(translations[lang]?.[key]){el.innerHTML=translations[lang][key]}});document.querySelectorAll("[data-i18n-title]").forEach(el=>{const key=el.getAttribute("data-i18n-title");if(translations[lang]&&translations[lang][key]){el.innerText=translations[lang][key];el.title=translations[lang][key]}})},100);document.querySelectorAll("[data-i18n-placeholder]").forEach(el=>{const key=el.getAttribute("data-i18n-placeholder");if(translations[lang]&&translations[lang][key]){el.placeholder=translations[lang][key]}});document.querySelectorAll("[data-i18n-value]").forEach(el=>{const key=el.getAttribute("data-i18n-value");const translated=translations[lang]?.[key];if(translated!==undefined){if("value"in el){el.value=translated}else{el.innerText=translated}}})}document.getElementById("languageSwitcher").addEventListener("change",async function(){const selectedLang=this.value;localStorage.setItem("preferredLanguage",selectedLang);await updateLanguage(selectedLang)});document.addEventListener("DOMContentLoaded",async()=>{const savedLang=localStorage.getItem("preferredLanguage")||"en";document.getElementById("languageSwitcher").value=savedLang;await updateLanguage(savedLang)});function updateCountdownDisplay(){const countdownEl=document.getElementById("sessionCountdown");const countdownTimeEl=document.getElementById("countdownTime");const lastAccessTime=parseInt(localStorage.getItem("lastAccessTime"))||0;const currentTime=Date.now();const sessionDuration=15*60*1e3;const timeLeft=Math.max(0,sessionDuration-(currentTime-lastAccessTime));const minutes=Math.floor(timeLeft/6e4);const seconds=Math.floor(timeLeft%6e4/1e3);const formatted=`${minutes.toString().padStart(2,"0")}:${seconds.toString().padStart(2,"0")}`;countdownTimeEl.innerText=formatted;if(timeLeft<=0){countdownEl.style.display="none"}else{countdownEl.style.display="block"}}setInterval(updateCountdownDisplay,1e3);